{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\przemokoduje\\\\certyfikat-1\\\\client\\\\src\\\\pages\\\\chatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatPage.scss\";\nimport Typewriter from \"typewriter-effect\";\nimport formData from \"../../components/formData\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatPage() {\n  _s();\n  const [showChat, setShowChat] = useState(false);\n  const [chatVisible, setChatVisible] = useState(false);\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\n\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\n  const userInputRef = useRef(null);\n  const typeSpeed = 100; // Prędkość pisania bota w ms\n\n  const handleMouseMove = event => {\n    console.log(`X: ${event.clientX}px, Y: ${event.clientY}px`);\n  };\n\n  // Użycie useEffect, aby dodać event listener dla zdarzenia mousemove\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    // Czyszczenie event listenera, gdy komponent jest unmountowany\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n  const handleNextClick = () => {\n    setShowChat(true);\n    setTimeout(() => {\n      setChatVisible(true);\n    }, 800); // Czas na animację zdjęcia bota\n  };\n  const calculateScrollOffset = () => {\n    if (lastMessageRef.current) {\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\n      setScrollOffset(prevOffset => prevOffset + lastMessageHeight);\n    }\n  };\n  useEffect(() => {\n    if (showChat) {\n      setTimeout(() => {\n        setHeadPhotoHidden(true);\n      }, 2000);\n    }\n  }, [showChat]);\n  const typeBotMessage = (text, id) => {\n    setBotTyping(true);\n    const isQuestionAlreadyAdded = conversation.some(message => message.type === \"bot\" && message.text === text);\n    if (!isQuestionAlreadyAdded) {\n      const typingDuration = text.length * typeSpeed + 500;\n      setTimeout(() => {\n        setConversation(prevConversation => [...prevConversation, {\n          type: \"bot\",\n          text: text,\n          id: id\n        } // Dodajemy id do wiadomości bota\n        ]);\n\n        // Obliczanie położenia dolnej krawędzi chatContainer\n        const chatContainer = document.querySelector(\".chatContainer\");\n        if (!chatContainer) {\n          console.log(\"chatContainer not found\");\n        } else {\n          console.log(\"chatContainer found:\", chatContainer);\n        }\n        if (chatContainer) {\n          const chatBottomPosition = chatContainer.getBoundingClientRect().bottom;\n          console.log(\"Aktualna dolna krawędź:\", chatBottomPosition);\n          const chatContainerRect = chatContainer.getBoundingClientRect();\n          const height = chatContainerRect.height;\n          console.log(\"Wysokość chatContainer (getBoundingClientRect):\", height);\n          const bottomPosition = 320;\n\n          // Obliczamy oczekiwaną rzedną górnej krawędzi (g)\n          const g = bottomPosition - height;\n          console.log(\"rzedna oczekiwana\", g);\n\n          // Obliczamy translateY, biorąc pod uwagę pierwotny top 220px\n          const translateY = 220 - g;\n\n          // Ustawiamy translateY dla chatContainer\n          chatContainer.style.transform = `translateY(${translateY}px)`;\n          console.log(`Ustawiamy translateY o wartości: ${translateY}px, wysokość kontenera: ${height}px`);\n        }\n        setBotTyping(false);\n        setTimeout(() => {\n          setUserInputVisible(true);\n        }, 1000);\n        calculateScrollOffset();\n      }, typingDuration);\n    }\n  };\n  useEffect(() => {\n    if (chatVisible && currentQuestionIndex < formData.length) {\n      setUserInputVisible(false);\n      const currentQuestion = formData[currentQuestionIndex];\n      if (currentQuestion.type === \"text\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      } else if (currentQuestion.type === \"choice\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      }\n    }\n  }, [currentQuestionIndex, chatVisible]);\n  const handleInputChange = (e, fieldName) => {\n    setUserInputs(prevInputs => ({\n      ...prevInputs,\n      [fieldName]: e.target.value\n    }));\n  };\n  const handleInputSubmit = event => {\n    if (event.key === \"Enter\") {\n      var _currentQuestion$inpu, _currentQuestion$inpu2;\n      const currentQuestion = formData[currentQuestionIndex];\n      const userResponse = {\n        type: \"user\",\n        text: userInputs[((_currentQuestion$inpu = currentQuestion.inputs) === null || _currentQuestion$inpu === void 0 ? void 0 : (_currentQuestion$inpu2 = _currentQuestion$inpu[0]) === null || _currentQuestion$inpu2 === void 0 ? void 0 : _currentQuestion$inpu2.fieldName) || \"singleInput\"] || \"\",\n        id: currentQuestion.id\n      };\n      setConversation(prevConversation => [...prevConversation, userResponse]);\n\n      // // Automatyczne przewijanie na dół po dodaniu odpowiedzi użytkownika\n      // if (lastMessageRef.current) {\n      //   lastMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\n      // }\n\n      const chatContainer = document.querySelector(\".chatContainer\");\n      if (chatContainer) {\n        const chatContainerRect = chatContainer.getBoundingClientRect();\n        console.log(\"Dolna krawędź chatContainer2:\", chatContainerRect.bottom);\n      }\n      setUserInputs({});\n      setUserInputVisible(false);\n      if (currentQuestionIndex < formData.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\n      }\n      calculateScrollOffset();\n    }\n  };\n  const handleOptionClick = option => {\n    const currentQuestion = formData[currentQuestionIndex];\n    const userResponse = {\n      type: \"user\",\n      text: option,\n      id: currentQuestion.id\n    };\n    setConversation(prevConversation => [...prevConversation, userResponse]);\n    setUserInputVisible(false);\n    if (currentQuestionIndex < formData.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\n    }\n    calculateScrollOffset();\n  };\n  const handleEdit = id => {\n    setEditMode(true);\n    setEditIndex(id);\n    const userMessage = conversation.find(msg => msg.type === \"user\" && msg.id === id);\n    if (userMessage) {\n      setUserInputs({\n        singleInput: userMessage.text\n      });\n    }\n  };\n  const handleSaveEdit = id => {\n    setConversation(prevConversation => prevConversation.map(msg => msg.id === id && msg.type === \"user\" ? {\n      ...msg,\n      text: userInputs.singleInput\n    } : msg));\n    setEditMode(false);\n    setEditIndex(null);\n    setUserInputs({});\n  };\n  const handleScroll = direction => {\n    const chatContainer = document.querySelector(\".chatContainer\");\n    if (!chatContainer) return;\n\n    // Obliczamy pozycję dolnej krawędzi chatContainer względem viewportu\n    const chatBottomPosition = chatContainer.getBoundingClientRect().bottom;\n    console.log(\"chatBottomPosition:\", chatBottomPosition);\n\n    // Przewijaj w górę, jeśli dolna krawędź chatContainer jest dalej niż 250px od górnej krawędzi viewportu\n    if (direction === \"up\" && chatBottomPosition > 300) {\n      const scrollAmount = 30;\n      setScrollOffset(prevOffset => Math.max(prevOffset + scrollAmount, 0));\n    } else if (direction === \"down\") {\n      const scrollAmount = 30;\n      setScrollOffset(prevOffset => prevOffset - scrollAmount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatback\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/design7_1.png\",\n        alt: \"Background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${headPhotoHidden ? \"hidden\" : \"\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/profil.jpg\",\n          alt: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"full-width-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Lorem ipsum dolor sit amet consectetur adipisicing elit...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextClick,\n          children: \"Dalej\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), chatVisible && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scroll-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleScroll(\"up\"),\n            children: \"\\u2B06\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleScroll(\"down\"),\n            children: \"\\u2B07\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer chat-visible\",\n          style: {\n            transform: `translateY(-${scrollOffset}px)`\n          },\n          children: [conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${message.type === \"bot\" ? \"chat-bot-message\" : \"chat-user-message\"}`,\n            ref: index === conversation.length - 1 ? lastMessageRef : null,\n            children: message.type === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bot-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/profil.jpg\",\n                  alt: \"Bot Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [editMode && editIndex === message.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: e => {\n                  if (e.key === \"Enter\") {\n                    handleSaveEdit(message.id);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 25\n              }, this), message.type === \"user\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEdit(message.id),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"/images/account.png\",\n                    alt: \"User Avatar\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this)), botTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bot-avatar\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/profil.jpg\",\n                alt: \"Bot Avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-text lato-light\",\n              children: /*#__PURE__*/_jsxDEV(Typewriter, {\n                options: {\n                  strings: [formData[currentQuestionIndex].question],\n                  autoStart: true,\n                  delay: typeSpeed,\n                  cursor: \" \"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this), userInputVisible && !editMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-input-container\",\n            ref: userInputRef,\n            children: formData[currentQuestionIndex].type === \"choice\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"choice-container\",\n              children: Array.isArray(formData[currentQuestionIndex].options) && formData[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleOptionClick(option),\n                className: \"lato-light\",\n                children: option\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user-message\",\n              children: [formData[currentQuestionIndex].inputs && Array.isArray(formData[currentQuestionIndex].inputs) ? formData[currentQuestionIndex].inputs.map((input, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `user-input ${formData[currentQuestionIndex].inputs.length === 1 ? \"full-width\" : \"half-width\"}`,\n                placeholder: input.placeholder,\n                value: userInputs[input.fieldName] || \"\",\n                onChange: e => handleInputChange(e, input.fieldName),\n                onKeyDown: handleInputSubmit\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 29\n              }, this)) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"user-input full-width\",\n                placeholder: \"Your response...\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: handleInputSubmit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/account.png\",\n                  alt: \"User Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"6C1Bd01hIMg3AK5jem8dNxece5s=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Typewriter","formData","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","showChat","setShowChat","chatVisible","setChatVisible","conversation","setConversation","headPhotoHidden","setHeadPhotoHidden","currentQuestionIndex","setCurrentQuestionIndex","userInputs","setUserInputs","userInputVisible","setUserInputVisible","botTyping","setBotTyping","scrollOffset","setScrollOffset","lastMessageRef","editMode","setEditMode","editIndex","setEditIndex","userInputRef","typeSpeed","handleMouseMove","event","console","log","clientX","clientY","window","addEventListener","removeEventListener","handleNextClick","setTimeout","calculateScrollOffset","current","lastMessageHeight","offsetHeight","prevOffset","typeBotMessage","text","id","isQuestionAlreadyAdded","some","message","type","typingDuration","length","prevConversation","chatContainer","document","querySelector","chatBottomPosition","getBoundingClientRect","bottom","chatContainerRect","height","bottomPosition","g","translateY","style","transform","currentQuestion","question","handleInputChange","e","fieldName","prevInputs","target","value","handleInputSubmit","key","_currentQuestion$inpu","_currentQuestion$inpu2","userResponse","inputs","handleOptionClick","option","handleEdit","userMessage","find","msg","singleInput","handleSaveEdit","map","handleScroll","direction","scrollAmount","Math","max","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","ref","onChange","onKeyDown","options","strings","autoStart","delay","cursor","Array","isArray","input","i","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/przemokoduje/certyfikat-1/client/src/pages/chatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./chatPage.scss\";\r\nimport Typewriter from \"typewriter-effect\";\r\nimport formData from \"../../components/formData\";\r\n\r\nexport default function ChatPage() {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [chatVisible, setChatVisible] = useState(false);\r\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\r\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\r\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\r\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\r\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\r\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\r\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\r\n\r\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\r\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\r\n  const userInputRef = useRef(null);\r\n\r\n  const typeSpeed = 100; // Prędkość pisania bota w ms\r\n\r\n  const handleMouseMove = (event) => {\r\n    console.log(`X: ${event.clientX}px, Y: ${event.clientY}px`);\r\n  };\r\n\r\n  // Użycie useEffect, aby dodać event listener dla zdarzenia mousemove\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n\r\n    // Czyszczenie event listenera, gdy komponent jest unmountowany\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  const handleNextClick = () => {\r\n    setShowChat(true);\r\n    setTimeout(() => {\r\n      setChatVisible(true);\r\n    }, 800); // Czas na animację zdjęcia bota\r\n  };\r\n\r\n  const calculateScrollOffset = () => {\r\n    if (lastMessageRef.current) {\r\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\r\n      setScrollOffset((prevOffset) => prevOffset + lastMessageHeight);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showChat) {\r\n      setTimeout(() => {\r\n        setHeadPhotoHidden(true);\r\n      }, 2000);\r\n    }\r\n  }, [showChat]);\r\n\r\n  const typeBotMessage = (text, id) => {\r\n    setBotTyping(true);\r\n\r\n    const isQuestionAlreadyAdded = conversation.some(\r\n      (message) => message.type === \"bot\" && message.text === text\r\n    );\r\n\r\n    if (!isQuestionAlreadyAdded) {\r\n      const typingDuration = text.length * typeSpeed + 500;\r\n\r\n      setTimeout(() => {\r\n        setConversation((prevConversation) => [\r\n          ...prevConversation,\r\n          { type: \"bot\", text: text, id: id }, // Dodajemy id do wiadomości bota\r\n        ]);\r\n\r\n        // Obliczanie położenia dolnej krawędzi chatContainer\r\n        const chatContainer = document.querySelector(\".chatContainer\");\r\n\r\n        if (!chatContainer) {\r\n          console.log(\"chatContainer not found\");\r\n        } else {\r\n          console.log(\"chatContainer found:\", chatContainer);\r\n        }\r\n        if (chatContainer) {\r\n          const chatBottomPosition =\r\n            chatContainer.getBoundingClientRect().bottom;\r\n          console.log(\"Aktualna dolna krawędź:\", chatBottomPosition);\r\n\r\n          const chatContainerRect = chatContainer.getBoundingClientRect();\r\n          const height = chatContainerRect.height;\r\n          console.log(\r\n            \"Wysokość chatContainer (getBoundingClientRect):\",\r\n            height\r\n          );\r\n          const bottomPosition = 320;\r\n\r\n          // Obliczamy oczekiwaną rzedną górnej krawędzi (g)\r\n        const g = bottomPosition - height;\r\n\r\n          console.log(\"rzedna oczekiwana\", g)\r\n\r\n\r\n         // Obliczamy translateY, biorąc pod uwagę pierwotny top 220px\r\n         const translateY = 220 - g;\r\n         \r\n         // Ustawiamy translateY dla chatContainer\r\n        chatContainer.style.transform = `translateY(${translateY}px)`;\r\n\r\n        console.log(\r\n          `Ustawiamy translateY o wartości: ${translateY}px, wysokość kontenera: ${height}px`\r\n        );\r\n      }\r\n        setBotTyping(false);\r\n\r\n        setTimeout(() => {\r\n          setUserInputVisible(true);\r\n        }, 1000);\r\n\r\n        calculateScrollOffset();\r\n      }, typingDuration);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatVisible && currentQuestionIndex < formData.length) {\r\n      setUserInputVisible(false);\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      if (currentQuestion.type === \"text\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      } else if (currentQuestion.type === \"choice\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      }\r\n    }\r\n  }, [currentQuestionIndex, chatVisible]);\r\n\r\n  const handleInputChange = (e, fieldName) => {\r\n    setUserInputs((prevInputs) => ({\r\n      ...prevInputs,\r\n      [fieldName]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleInputSubmit = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      const userResponse = {\r\n        type: \"user\",\r\n        text:\r\n          userInputs[currentQuestion.inputs?.[0]?.fieldName || \"singleInput\"] ||\r\n          \"\",\r\n        id: currentQuestion.id,\r\n      };\r\n\r\n      setConversation((prevConversation) => [\r\n        ...prevConversation,\r\n        userResponse,\r\n      ]);\r\n\r\n      // // Automatyczne przewijanie na dół po dodaniu odpowiedzi użytkownika\r\n      // if (lastMessageRef.current) {\r\n      //   lastMessageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n      // }\r\n\r\n      const chatContainer = document.querySelector(\".chatContainer\");\r\n      if (chatContainer) {\r\n        const chatContainerRect = chatContainer.getBoundingClientRect();\r\n        console.log(\"Dolna krawędź chatContainer2:\", chatContainerRect.bottom);\r\n      }\r\n\r\n      setUserInputs({});\r\n      setUserInputVisible(false);\r\n\r\n      if (currentQuestionIndex < formData.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      } else {\r\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n      }\r\n\r\n      calculateScrollOffset();\r\n    }\r\n  };\r\n\r\n  const handleOptionClick = (option) => {\r\n    const currentQuestion = formData[currentQuestionIndex];\r\n\r\n    const userResponse = {\r\n      type: \"user\",\r\n      text: option,\r\n      id: currentQuestion.id,\r\n    };\r\n\r\n    setConversation((prevConversation) => [...prevConversation, userResponse]);\r\n\r\n    setUserInputVisible(false);\r\n\r\n    if (currentQuestionIndex < formData.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n    }\r\n\r\n    calculateScrollOffset();\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    setEditMode(true);\r\n    setEditIndex(id);\r\n\r\n    const userMessage = conversation.find(\r\n      (msg) => msg.type === \"user\" && msg.id === id\r\n    );\r\n\r\n    if (userMessage) {\r\n      setUserInputs({ singleInput: userMessage.text });\r\n    }\r\n  };\r\n\r\n  const handleSaveEdit = (id) => {\r\n    setConversation((prevConversation) =>\r\n      prevConversation.map((msg) =>\r\n        msg.id === id && msg.type === \"user\"\r\n          ? { ...msg, text: userInputs.singleInput }\r\n          : msg\r\n      )\r\n    );\r\n    setEditMode(false);\r\n    setEditIndex(null);\r\n    setUserInputs({});\r\n  };\r\n\r\n  const handleScroll = (direction) => {\r\n    const chatContainer = document.querySelector(\".chatContainer\");\r\n    if (!chatContainer) return;\r\n\r\n    // Obliczamy pozycję dolnej krawędzi chatContainer względem viewportu\r\n    const chatBottomPosition = chatContainer.getBoundingClientRect().bottom;\r\n\r\n    console.log(\"chatBottomPosition:\", chatBottomPosition);\r\n\r\n    // Przewijaj w górę, jeśli dolna krawędź chatContainer jest dalej niż 250px od górnej krawędzi viewportu\r\n    if (direction === \"up\" && chatBottomPosition > 300) {\r\n      const scrollAmount = 30;\r\n      setScrollOffset((prevOffset) => Math.max(prevOffset + scrollAmount, 0));\r\n    } else if (direction === \"down\") {\r\n      const scrollAmount = 30;\r\n      setScrollOffset((prevOffset) => prevOffset - scrollAmount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatpage\">\r\n      <div className=\"chatback\">\r\n        <img src=\"/images/design7_1.png\" alt=\"Background\" />\r\n      </div>\r\n\r\n      <div className=\"wrapContainer\">\r\n        <div\r\n          className={`headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${\r\n            headPhotoHidden ? \"hidden\" : \"\"\r\n          }`}\r\n        >\r\n          <img src=\"/images/profil.jpg\" alt=\"Profile\" />\r\n        </div>\r\n        <hr className=\"full-width-line\" />\r\n\r\n        <div\r\n          className={`infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`}\r\n        >\r\n          <span>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit...\r\n          </span>\r\n          <button onClick={handleNextClick}>Dalej</button>\r\n        </div>\r\n\r\n        {chatVisible && (\r\n          <>\r\n            <div className=\"scroll-buttons\">\r\n              {/* Przyciski do przewijania */}\r\n              <button onClick={() => handleScroll(\"up\")}>⬆</button>\r\n              <button onClick={() => handleScroll(\"down\")}>⬇</button>\r\n            </div>\r\n\r\n            <div\r\n              className=\"chatContainer chat-visible\"\r\n              style={{ transform: `translateY(-${scrollOffset}px)` }}\r\n            >\r\n              {conversation.map((message, index) => (\r\n                <div\r\n                  className={`chat-message ${\r\n                    message.type === \"bot\"\r\n                      ? \"chat-bot-message\"\r\n                      : \"chat-user-message\"\r\n                  }`}\r\n                  ref={\r\n                    index === conversation.length - 1 ? lastMessageRef : null\r\n                  }\r\n                >\r\n                  {message.type === \"bot\" ? (\r\n                    <>\r\n                      <div className=\"bot-avatar\">\r\n                        <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                      </div>\r\n                      <p className=\"lato-light\">{message.text}</p>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      {editMode && editIndex === message.id ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                              handleSaveEdit(message.id);\r\n                            }\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <p className=\"lato-light\">{message.text}</p>\r\n                      )}\r\n                      {message.type === \"user\" && (\r\n                        <div className=\"user-avatar\">\r\n                          <button onClick={() => handleEdit(message.id)}>\r\n                            <img src=\"/images/account.png\" alt=\"User Avatar\" />\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              {botTyping && (\r\n                <div className=\"chat-bot-message\">\r\n                  <div className=\"bot-avatar\">\r\n                    <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                  </div>\r\n                  <div className=\"typing-text lato-light\">\r\n                    <Typewriter\r\n                      options={{\r\n                        strings: [formData[currentQuestionIndex].question],\r\n                        autoStart: true,\r\n                        delay: typeSpeed,\r\n                        cursor: \" \",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {userInputVisible && !editMode && (\r\n                <div className=\"user-input-container\" ref={userInputRef}>\r\n                  {formData[currentQuestionIndex].type === \"choice\" ? (\r\n                    <div className=\"choice-container\">\r\n                      {Array.isArray(formData[currentQuestionIndex].options) &&\r\n                        formData[currentQuestionIndex].options.map(\r\n                          (option, index) => (\r\n                            <button\r\n                              key={index}\r\n                              onClick={() => handleOptionClick(option)}\r\n                              className=\"lato-light\"\r\n                            >\r\n                              {option}\r\n                            </button>\r\n                          )\r\n                        )}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"chat-user-message\">\r\n                      {formData[currentQuestionIndex].inputs &&\r\n                      Array.isArray(formData[currentQuestionIndex].inputs) ? (\r\n                        formData[currentQuestionIndex].inputs.map(\r\n                          (input, i) => (\r\n                            <input\r\n                              key={i}\r\n                              type=\"text\"\r\n                              className={`user-input ${\r\n                                formData[currentQuestionIndex].inputs.length ===\r\n                                1\r\n                                  ? \"full-width\"\r\n                                  : \"half-width\"\r\n                              }`}\r\n                              placeholder={input.placeholder}\r\n                              value={userInputs[input.fieldName] || \"\"}\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, input.fieldName)\r\n                              }\r\n                              onKeyDown={handleInputSubmit}\r\n                            />\r\n                          )\r\n                        )\r\n                      ) : (\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"user-input full-width\"\r\n                          placeholder=\"Your response...\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={handleInputSubmit}\r\n                        />\r\n                      )}\r\n                      <div className=\"user-avatar\">\r\n                        <img src=\"/images/account.png\" alt=\"User Avatar\" />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}