{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\przemokoduje\\\\certyfikat-1\\\\client\\\\src\\\\pages\\\\chatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatPage.scss\";\nimport Typewriter from \"typewriter-effect\";\nimport formData from \"../../components/formData\";\nimport jsPDF from \"jspdf\";\nimport EmailForm from \"../../components/emailForm/EmailForm\";\nimport AvatarButton from \"../../components/avatarButton/AvatarButton\";\nimport FileUploader from \"../../components/fileUploader/FileUploader\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatPage() {\n  _s();\n  const [showChat, setShowChat] = useState(false);\n  const [chatVisible, setChatVisible] = useState(false);\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\n\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\n  const userInputRef = useRef(null);\n  const [skippedQuestions, setSkippedQuestions] = useState([]); // Lista pytań pominiętych\n  const [showEmailForm, setShowEmailForm] = useState(false);\n  const chatContainerRef = useRef(null); // Dodaj ref\n  const [isUserScrolling, setIsUserScrolling] = useState(false); // Flaga do śledzenia ręcznego przewijania\n  const [isReturningUser, setIsReturningUser] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [surname, setSurname] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [uploadedFiles, setUploadedFiles] = useState({\n    exteriorPhoto: null,\n    propertyLayout: null,\n    additionalPhoto: null\n  });\n  useEffect(() => {\n    // Funkcja pomocnicza do pobierania odpowiedzi\n    const getResponse = () => {\n      const userMessages = document.querySelectorAll(\".chat-user-message p\");\n      let responses = [];\n      userMessages.forEach(msg => {\n        responses.push(msg.textContent); // Pobieranie treści <p>\n      });\n      return responses; // Zwracamy tablicę odpowiedzi użytkownika\n    };\n\n    // Pobierz tablicę odpowiedzi użytkownika\n    const responses = getResponse();\n\n    // Ustal indeksy pytań w formData\n    const nameIndex = 1; // Indeks pytania o imię\n    const surnameIndex = 2; // Indeks pytania o nazwisko\n    const emailIndex = 3; // Indeks pytania o email\n    const addressIndex = 5; // Indeks pytania o adres (miasto i ulica)\n\n    // Wyciągnij odpowiedzi z tablicy 'responses' na podstawie indeksów\n    // Ustaw wartości w stanach\n    setName(responses[nameIndex] || \"\");\n    setSurname(responses[surnameIndex] || \"\");\n    setEmail(responses[emailIndex] || \"\");\n    setAddress(responses[addressIndex] || \"\");\n  }, [currentQuestionIndex]); // Wywołanie, gdy zmieni się currentQuestionIndex\n\n  // Dodane: Sprawdzenie czy użytkownik jest powracający\n  useEffect(() => {\n    const userVisitedBefore = localStorage.getItem(\"userVisitedBefore\");\n    if (userVisitedBefore) {\n      setIsReturningUser(true);\n    } else {\n      localStorage.setItem(\"userVisitedBefore\", \"true\");\n    }\n  }, []);\n  const typeSpeed = 150; // Prędkość pisania bota w ms\n\n  const handleShowEmailForm = () => {\n    setShowEmailForm(true);\n  };\n  const handleCloseEmailForm = () => {\n    setShowEmailForm(false);\n  };\n  const handleNextClick = () => {\n    setShowChat(true);\n    setTimeout(() => {\n      setChatVisible(true);\n    }, 800); // Czas na animację zdjęcia bota\n  };\n\n  // Funkcja do śledzenia, czy użytkownik przewija ręcznie\n  const handleScroll = () => {\n    setIsUserScrolling(true);\n    const chatContainer = chatContainerRef.current;\n    const scrollTop = chatContainer.scrollTop;\n    const clientHeight = chatContainer.clientHeight;\n    const scrollHeight = chatContainer.scrollHeight;\n    console.log(\"scrollTop:\", scrollTop);\n    console.log(\"clientHeight:\", clientHeight);\n    console.log(\"scrollHeight:\", scrollHeight);\n    if (scrollTop + clientHeight < scrollHeight - 50) {\n      console.log(\"Użytkownik przewija ręcznie. Nie jesteśmy na dole czatu.\");\n    } else {\n      console.log(\"Użytkownik znajduje się blisko lub na dole czatu.\");\n    }\n\n    // if (\n    //   chatContainer.scrollTop + chatContainer.clientHeight <\n    //   chatContainer.scrollHeight + 10\n    // ) {\n    //   setIsUserScrolling(true);\n    // } else {\n    //   setIsUserScrolling(false);\n    // }\n  };\n  useEffect(() => {\n    // Sprawdzamy, czy istnieją dane rozmowy w localStorage\n    const savedConversation = localStorage.getItem(\"conversation\");\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n    if (savedQuestionIndex) {\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\n    }\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\n\n  useEffect(() => {\n    if (userInputVisible) {\n      console.log(\"userInput is visible\", userInputVisible);\n      // Znajdujemy najbliższą wiadomość bota (ostatnią przed user-input-container)\n      const chatContainer = chatContainerRef.current;\n      const botMessages = chatContainer.querySelectorAll(\".chat-bot-message\");\n      const userMessages = chatContainer.querySelectorAll(\".chat-user-message\");\n      const lastBotMessage = botMessages[botMessages.length - 1];\n      const wrapContainer = document.querySelector(\".wrapContainer\"); // wrapContainer\n      const wrapContainerRect = wrapContainer.getBoundingClientRect();\n\n      // Znajdujemy drugą od końca wiadomość bota i użytkownika\n      const secondLastBotMessage = botMessages.length > 1 ? botMessages[botMessages.length - 2] : null;\n      const secondLastUserMessage = userMessages.length > 1 ? userMessages[userMessages.length - 2] : null;\n      if (lastBotMessage) {\n        // Pobierz pozycję wiadomości bota względem chatContainer\n        const botMessageRect = lastBotMessage.getBoundingClientRect();\n        console.log(botMessageRect);\n        console.log(wrapContainerRect);\n\n        // Oblicz różnicę między pozycją wiadomości a pozycją 220px od góry wrapContainer\n        const currentOffset = botMessageRect.top - wrapContainerRect.top;\n        const targetOffset = 220; // docelowa pozycja 220px od górnej krawędzi\n\n        let scrollAmount = currentOffset - targetOffset;\n\n        // Jeśli istnieje druga od końca wiadomość bota, dodaj jej wysokość\n        if (secondLastBotMessage) {\n          const pElementBot = secondLastBotMessage.querySelector(\"p\"); // Znajduje <p> w secondLastBotMessage\n          if (pElementBot) {\n            console.log(\"Tekst w secondLastBotMessage:\", pElementBot.textContent); // Wyświetla tekst\n          }\n          const secondBotMessageHeight = secondLastBotMessage.getBoundingClientRect().height;\n          scrollAmount += secondBotMessageHeight;\n        }\n\n        // Jeśli istnieje druga od końca wiadomość użytkownika, dodaj jej wysokość\n        if (secondLastUserMessage) {\n          const pElementUser = secondLastUserMessage.querySelector(\"p\"); // Znajduje <p> w secondLastUserMessage\n          if (pElementUser) {\n            console.log(\"Tekst w secondLastUserMessage:\", pElementUser.textContent); // Wyświetla tekst\n          }\n          const secondUserMessageHeight = secondLastUserMessage.getBoundingClientRect().height;\n          scrollAmount += secondUserMessageHeight;\n        }\n        console.log(scrollAmount);\n\n        // Pobierz aktualny styl top\n        const currentTop = parseInt(window.getComputedStyle(chatContainer).top, 10) || 0;\n        const newTop = currentTop - scrollAmount; // Oblicz nową wartość top\n\n        // Ustaw nową wartość top\n        chatContainer.style.top = `${newTop}px`;\n        console.log(\"Przesuwanie chatContainer, nowa wartość top:\", newTop);\n      }\n    }\n  }, [userInputVisible]);\n  const calculateScrollOffset = () => {\n    if (lastMessageRef.current) {\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\n      setScrollOffset(prevOffset => prevOffset + lastMessageHeight);\n    }\n  };\n  useEffect(() => {\n    if (showChat) {\n      setTimeout(() => {\n        setHeadPhotoHidden(true);\n      }, 2000);\n    }\n  }, [showChat]);\n  const typeBotMessage = (text, id) => {\n    setBotTyping(true);\n    const isQuestionAlreadyAdded = conversation.some(message => message.type === \"bot\" && message.text === text);\n    if (!isQuestionAlreadyAdded) {\n      const typingDuration = text.length * typeSpeed + 500;\n      setTimeout(() => {\n        setConversation(prevConversation => [...prevConversation, {\n          type: \"bot\",\n          text: text,\n          id: id\n        } // Dodajemy id do wiadomości bota\n        ]);\n        setBotTyping(false);\n        setTimeout(() => {\n          setUserInputVisible(true);\n        }, 1000);\n        calculateScrollOffset();\n      }, typingDuration);\n    }\n  };\n  useEffect(() => {\n    if (chatVisible && currentQuestionIndex < formData.length) {\n      setUserInputVisible(false);\n      const currentQuestion = formData[currentQuestionIndex];\n      if (currentQuestion.type === \"text\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      } else if (currentQuestion.type === \"choice\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      }\n    }\n  }, [currentQuestionIndex, chatVisible]);\n  const handleInputChange = (e, fieldName) => {\n    setUserInputs(prevInputs => ({\n      ...prevInputs,\n      [fieldName]: e.target.value\n    }));\n    console.log(\"Zmiana wartości dla:\", fieldName, \"na\", e.target.value);\n  };\n  useEffect(() => {\n    // Sprawdzamy, czy wszystkie pytania zostały odpowiedziane\n    if (currentQuestionIndex >= formData.length) {\n      console.log(\"Wszystkie pytania zakończone, pokaż skippedQuestions\");\n    }\n  }, [currentQuestionIndex, formData.length]);\n  const handleInputSubmit = event => {\n    if (event.key === \"Enter\") {\n      var _currentQuestion$inpu, _currentQuestion$inpu2;\n      const currentQuestion = formData[currentQuestionIndex];\n      const userResponse = {\n        type: \"user\",\n        text: Array.isArray(currentQuestion.inputs) && currentQuestion.inputs.length > 1 ? `${userInputs[currentQuestion.inputs[0].fieldName] || \"\"}, ${userInputs[currentQuestion.inputs[1].fieldName] || \"\"}` : userInputs[((_currentQuestion$inpu = currentQuestion.inputs) === null || _currentQuestion$inpu === void 0 ? void 0 : (_currentQuestion$inpu2 = _currentQuestion$inpu[0]) === null || _currentQuestion$inpu2 === void 0 ? void 0 : _currentQuestion$inpu2.fieldName) || \"singleInput\"] || \"\",\n        id: currentQuestion.id\n      };\n      const shouldSkip = userResponse.text === \"0\" || [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userResponse.text);\n      console.log(shouldSkip);\n      // Natychmiastowa aktualizacja stanu\n      setSkippedQuestions(prevSkipped => {\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\n          return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy\n        } else if (!shouldSkip && prevSkipped.includes(currentQuestion.question)) {\n          return prevSkipped.filter(q => q !== currentQuestion.question); // Usuwamy pytanie z listy\n        }\n        return prevSkipped;\n      });\n\n      // Zapisz odpowiedzi\n      setConversation(prevConversation => {\n        const updatedConversation = [...prevConversation, userResponse];\n        localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n        localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\n        return updatedConversation;\n      });\n\n      // Zmiana currentQuestionIndex\n      setCurrentQuestionIndex(prevIndex => {\n        const newIndex = prevIndex + 1;\n        localStorage.setItem(\"currentQuestionIndex\", newIndex);\n        return newIndex;\n      });\n\n      // Usuwanie tylko danych dla bieżącego pytania, zamiast resetować wszystkie dane\n      setUserInputs(prevInputs => {\n        const updatedInputs = {\n          ...prevInputs\n        };\n        if (Array.isArray(currentQuestion.inputs)) {\n          currentQuestion.inputs.forEach(input => {\n            delete updatedInputs[input.fieldName];\n          });\n        } else {\n          delete updatedInputs.singleInput;\n        }\n        return updatedInputs;\n      });\n      setUserInputVisible(false);\n      if (currentQuestionIndex < formData.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\n      }\n      calculateScrollOffset();\n    }\n  };\n  const handleOptionClick = option => {\n    const currentQuestion = formData[currentQuestionIndex];\n    const userResponse = {\n      type: \"user\",\n      text: option,\n      id: currentQuestion.id\n    };\n    const shouldSkip = [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(option);\n    setSkippedQuestions(prevSkipped => {\n      if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\n        return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy\n      } else if (!shouldSkip && prevSkipped.includes(currentQuestion.question)) {\n        return prevSkipped.filter(q => q !== currentQuestion.question); // Usuwamy pytanie z listy\n      }\n      return prevSkipped;\n    });\n    setConversation(prevConversation => {\n      const updatedConversation = [...prevConversation, userResponse];\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\n      return updatedConversation;\n    });\n\n    // Zmiana currentQuestionIndex\n    setCurrentQuestionIndex(prevIndex => {\n      const newIndex = prevIndex + 1;\n      localStorage.setItem(\"currentQuestionIndex\", newIndex); // Zapis do localStorage\n      return newIndex;\n    });\n    setUserInputVisible(false);\n    if (currentQuestionIndex < formData.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\n    }\n    calculateScrollOffset();\n  };\n  const handleAutoResponse = () => {\n    const currentQuestion = formData[currentQuestionIndex];\n\n    // Tworzymy automatyczną odpowiedź\n    const userResponse = {\n      type: \"user\",\n      text: \"Nie znam odpowiedzi\",\n      id: currentQuestion.id\n    };\n\n    // Sprawdzenie, czy odpowiedź powinna być pominięta\n    const shouldSkip = [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userResponse.text);\n    // Aktualizacja listy pytań pominiętych\n    setSkippedQuestions(prevSkipped => {\n      if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\n        return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy pominiętych\n      }\n      return prevSkipped;\n    });\n\n    // Aktualizujemy stan rozmowy\n    setConversation(prevConversation => {\n      const updatedConversation = [...prevConversation, userResponse];\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\n      return updatedConversation;\n    });\n\n    // Zwiększamy indeks pytania\n    setCurrentQuestionIndex(prevIndex => {\n      const newIndex = prevIndex + 1;\n      localStorage.setItem(\"currentQuestionIndex\", newIndex);\n      return newIndex;\n    });\n\n    // Ukryjemy input po automatycznej odpowiedzi\n    setUserInputVisible(false);\n  };\n  const handleEdit = id => {\n    setEditMode(true);\n    setEditIndex(id);\n    const userMessage = conversation.find(msg => msg.type === \"user\" && msg.id === id);\n    if (userMessage) {\n      setUserInputs({\n        singleInput: userMessage.text\n      });\n    }\n  };\n  const handleSaveEdit = id => {\n    setConversation(prevConversation => {\n      const updatedConversation = prevConversation.map(msg => msg.id === id && msg.type === \"user\" ? {\n        ...msg,\n        text: userInputs.singleInput\n      } : msg);\n      const currentQuestion = formData.find(q => q.id === id);\n\n      // Warunki, które kwalifikują pytanie do listy pytań pominiętych\n      const shouldSkip = userInputs.singleInput === \"0\" || [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userInputs.singleInput);\n      setSkippedQuestions(prevSkipped => {\n        let updatedSkippedQuestions;\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\n          // Dodanie pytania na listę, jeśli powinno być pominięte\n          updatedSkippedQuestions = [...prevSkipped, currentQuestion.question];\n        } else if (!shouldSkip && prevSkipped.includes(currentQuestion.question)) {\n          // Usunięcie pytania z listy, jeśli nie powinno być pominięte\n          updatedSkippedQuestions = prevSkipped.filter(question => question !== currentQuestion.question);\n        } else {\n          updatedSkippedQuestions = prevSkipped;\n        }\n        return updatedSkippedQuestions; // Tylko aktualizacja stanu\n      });\n\n      // Zapisanie zaktualizowanej rozmowy do localStorage\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n      return updatedConversation;\n    });\n    setEditMode(false);\n    setEditIndex(null);\n    // setUserInputs({});\n  };\n  useEffect(() => {\n    // Sprawdzamy, czy istnieją dane rozmowy i lista pytań pominiętych w localStorage\n    const savedConversation = localStorage.getItem(\"conversation\");\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\n    const savedSkippedQuestions = localStorage.getItem(\"skippedQuestions\");\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n    if (savedQuestionIndex) {\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\n    }\n    if (savedSkippedQuestions) {\n      setSkippedQuestions(JSON.parse(savedSkippedQuestions)); // Przywracamy listę pytań pominiętych\n    }\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\n\n  useEffect(() => {\n    // Zapisujemy listę pytań pominiętych do localStorage, jeśli się zmienia\n    if (skippedQuestions && skippedQuestions.length > 0) {\n      localStorage.setItem(\"skippedQuestions\", JSON.stringify(skippedQuestions));\n    }\n  }, [skippedQuestions]);\n  console.log(currentQuestionIndex);\n  console.log(formData.length);\n  const generatePDF = async skippedQuestions => {\n    const doc = new jsPDF();\n\n    // Pobierz czcionkę Roboto w formacie .ttf\n    const response = await fetch(\"/fonts/Roboto-Regular.ttf\");\n    const fontBlob = await response.blob();\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n      reader.onload = function () {\n        const base64Font = reader.result.split(\",\")[1];\n\n        // Dodaj czcionkę do jsPDF\n        doc.addFileToVFS(\"Roboto-Regular.ttf\", base64Font);\n        doc.addFont(\"Roboto-Regular.ttf\", \"Roboto\", \"normal\");\n        doc.setFont(\"Roboto\");\n\n        // Ustaw rozmiar czcionki\n        doc.setFontSize(14);\n\n        // Dodaj tekst do dokumentu\n        doc.text(\"Lista pytań\", 20, 20);\n        let yOffset = 30;\n        // skippedQuestions.forEach((question, index) => {\n        //   doc.text(`${index + 1}. ${question}`, 20, yOffset);\n        //   yOffset += 10;\n        // });\n\n        skippedQuestions.forEach((skippedQuestion, index) => {\n          const formQuestion = formData.find(q => q.question === skippedQuestion);\n\n          // Zwiększenie przesunięcia dla pytania\n          yOffset += 10;\n\n          // Dodaj pytanie\n          doc.text(`${index + 1}. ${(formQuestion === null || formQuestion === void 0 ? void 0 : formQuestion.questForOther) || skippedQuestion}`, 20, yOffset);\n\n          // Sprawdź, czy pytanie ma opcje wyboru i dodaj je z odstępami\n          if (formQuestion !== null && formQuestion !== void 0 && formQuestion.options) {\n            formQuestion.options.forEach((option, optionIndex) => {\n              yOffset += 8; // Dodaj odstęp między opcjami\n              doc.text(`- ${option}`, 30, yOffset); // Opcje są wcięte\n            });\n          }\n\n          // Jeżeli miejsce na stronie się skończy, dodaj nową stronę\n          if (yOffset > 280) {\n            doc.addPage();\n            yOffset = 20; // Resetuj yOffset na nowej stronie\n          }\n        });\n\n        // Generuj PDF jako Blob\n        const pdfBlob = doc.output(\"blob\");\n        resolve(pdfBlob);\n      };\n      reader.onerror = function () {\n        reject(new Error(\"Błąd odczytu pliku czcionki\"));\n      };\n      reader.readAsDataURL(fontBlob); // Odczytaj czcionkę jako Base64\n    });\n  };\n  const sendPDFToBackend = async pdfBlob => {\n    const formData = new FormData();\n    formData.append(\"pdf\", pdfBlob, \"pytaniaChat.pdf\");\n    try {\n      const response = await fetch(\"http://localhost:3001/api/upload-pdf\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        console.log(\"PDF został pomyślnie wysłany na backend.\");\n      } else {\n        console.error(\"Błąd podczas wysyłania PDF na backend.\");\n      }\n    } catch (error) {\n      console.error(\"Błąd:\", error);\n    }\n  };\n  const handleGenerateAndSendPDF = async (from, to, note) => {\n    try {\n      const pdfBlob = await generatePDF(skippedQuestions);\n      await sendPDFToBackend(pdfBlob);\n\n      // Wyślij e-mail po wygenerowaniu PDF\n      await fetch(\"http://localhost:3001/api/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          from,\n          to,\n          note\n        })\n      });\n      alert(\"PDF wygenerowany i wysłany na maila.\");\n      setShowEmailForm(false); // Zamknięcie formularza po wysłaniu\n    } catch (error) {\n      console.error(\"Błąd podczas generowania lub wysyłania PDF:\", error);\n    }\n  };\n  const handleFileSelect = (file, fieldName) => {\n    setUploadedFiles(prevFiles => ({\n      ...prevFiles,\n      [fieldName]: file\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatback\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/design7_1.png\",\n        alt: \"Background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${headPhotoHidden ? \"hidden\" : \"\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/profil.jpg\",\n          alt: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"full-width-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`,\n        children: [isReturningUser ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Witamy ponownie! Cieszymy si\\u0119, \\u017Ce wr\\xF3ci\\u0142e\\u015B do naszej aplikacji. Mo\\u017Cemy kontynuowa\\u0107, gdzie sko\\u0144czy\\u0142e\\u015B.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Witamy w naszej aplikacji! Zacznij swoj\\u0105 podr\\xF3\\u017C, odpowiadaj\\u0105c na kilka pyta\\u0144.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextClick,\n          children: \"Dalej\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), chatVisible && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer chat-visible\",\n          style: {\n            transform: `translateY(-${scrollOffset}px)`\n          },\n          ref: chatContainerRef,\n          onScroll: handleScroll,\n          children: [conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${message.type === \"bot\" ? \"chat-bot-message\" : \"chat-user-message\"}`,\n            ref: index === conversation.length - 1 ? lastMessageRef : null,\n            children: message.type === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bot-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/profil.jpg\",\n                  alt: \"Bot Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [editMode && editIndex === message.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: e => {\n                  if (e.key === \"Enter\") {\n                    handleSaveEdit(message.id);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 25\n              }, this), message.type === \"user\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEdit(message.id),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"/images/account.png\",\n                    alt: \"User Avatar\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 752,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 17\n          }, this)), currentQuestionIndex >= formData.length && (skippedQuestions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-bot-message\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"head-summary\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bot-avatar\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"/images/profil.jpg\",\n                    alt: \"Bot Avatar\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 767,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 766,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"lato-light\",\n                  children: \"Dzi\\u0119kuj\\u0119 za po\\u015Bwi\\u0119cony czas. Oto lista pyta\\u0144 do zarz\\u0105dcy:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 769,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: async () => {\n                  const pdfBlob = await generatePDF(skippedQuestions);\n                  const pdfUrl = URL.createObjectURL(pdfBlob);\n                  window.open(pdfUrl, \"_blank\");\n                },\n                children: \"Otw\\xF3rz PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"form lato-light\",\n                style: {\n                  marginTop: \"15px\"\n                },\n                children: \"Oto formularz do wysy\\u0142ki pliku do zarz\\u0105dcy:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 23\n              }, this), console.log(\"Dane przekazywane do EmailForm:\", {\n                senderName: `${userInputs[\"imie\"] || \"\"} ${userInputs[\"nazwisko\"] || \"\"}`,\n                propertyAddress: `${userInputs[\"miasto\"] || \"\"}, ${userInputs[\"ulica\"] || \"\"}`,\n                from: userInputs[\"email\"] || \"\"\n              }), /*#__PURE__*/_jsxDEV(EmailForm, {\n                onClose: handleCloseEmailForm,\n                handleGenerateAndSendPDF: handleGenerateAndSendPDF,\n                senderName: `${name} ${surname}`,\n                propertyAddress: address,\n                from: email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-bot-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bot-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/profil.jpg\",\n                  alt: \"Bot Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-regular\",\n                children: \"Dzi\\u0119kujemy za wype\\u0142nienie ankiety oraz po\\u015Bwi\\u0119cony czas.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 820,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-regular\",\n                children: \"Prze\\u015Blij dodatkowe zdj\\u0119cia:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"summary-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(FileUploader, {\n                  label: \"Zdj\\u0119cie nieruchomo\\u015Bci z zewn\\u0105trz\",\n                  onFileSelect: file => handleFileSelect(file, \"exteriorPhoto\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n                  label: \"Rzut nieruchomo\\u015Bci\",\n                  onFileSelect: file => handleFileSelect(file, \"propertyLayout\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 837,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n                  label: \"Dodatkowe zdj\\u0119cie\",\n                  onFileSelect: file => handleFileSelect(file, \"additionalPhoto\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 843,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"send\",\n                children: \"Wy\\u015Blij\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)), botTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bot-avatar\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/profil.jpg\",\n                alt: \"Bot Avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 900,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-text lato-light\",\n              children: /*#__PURE__*/_jsxDEV(Typewriter, {\n                options: {\n                  strings: [formData[currentQuestionIndex].question],\n                  autoStart: true,\n                  delay: typeSpeed,\n                  cursor: \" \"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 903,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 17\n          }, this), userInputVisible && !editMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-input-container\",\n            ref: userInputRef,\n            children: formData[currentQuestionIndex].type === \"choice\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `choice-container ${currentQuestionIndex === 0 ? \"row-layout\" : \"column-layout\"}`,\n              children: Array.isArray(formData[currentQuestionIndex].options) && formData[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleOptionClick(option),\n                className: \"lato-light\",\n                children: option\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user-message\",\n              children: [formData[currentQuestionIndex].inputs && Array.isArray(formData[currentQuestionIndex].inputs) ? formData[currentQuestionIndex].inputs.map((input, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `user-input ${formData[currentQuestionIndex].inputs.length === 1 ? \"full-width\" : \"half-width\"}`,\n                placeholder: input.placeholder,\n                value: userInputs[input.fieldName] || \"\",\n                onChange: e => handleInputChange(e, input.fieldName),\n                onKeyDown: handleInputSubmit\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 29\n              }, this)) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"user-input full-width\",\n                placeholder: \"Your response...\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: handleInputSubmit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 963,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(AvatarButton, {\n                onAutoResponse: handleAutoResponse\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 672,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"libpFud2gcEg6dudCaBaQkahxpU=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Typewriter","formData","jsPDF","EmailForm","AvatarButton","FileUploader","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","showChat","setShowChat","chatVisible","setChatVisible","conversation","setConversation","headPhotoHidden","setHeadPhotoHidden","currentQuestionIndex","setCurrentQuestionIndex","userInputs","setUserInputs","userInputVisible","setUserInputVisible","botTyping","setBotTyping","scrollOffset","setScrollOffset","lastMessageRef","editMode","setEditMode","editIndex","setEditIndex","userInputRef","skippedQuestions","setSkippedQuestions","showEmailForm","setShowEmailForm","chatContainerRef","isUserScrolling","setIsUserScrolling","isReturningUser","setIsReturningUser","name","setName","surname","setSurname","email","setEmail","address","setAddress","uploadedFiles","setUploadedFiles","exteriorPhoto","propertyLayout","additionalPhoto","getResponse","userMessages","document","querySelectorAll","responses","forEach","msg","push","textContent","nameIndex","surnameIndex","emailIndex","addressIndex","userVisitedBefore","localStorage","getItem","setItem","typeSpeed","handleShowEmailForm","handleCloseEmailForm","handleNextClick","setTimeout","handleScroll","chatContainer","current","scrollTop","clientHeight","scrollHeight","console","log","savedConversation","savedQuestionIndex","JSON","parse","botMessages","lastBotMessage","length","wrapContainer","querySelector","wrapContainerRect","getBoundingClientRect","secondLastBotMessage","secondLastUserMessage","botMessageRect","currentOffset","top","targetOffset","scrollAmount","pElementBot","secondBotMessageHeight","height","pElementUser","secondUserMessageHeight","currentTop","parseInt","window","getComputedStyle","newTop","style","calculateScrollOffset","lastMessageHeight","offsetHeight","prevOffset","typeBotMessage","text","id","isQuestionAlreadyAdded","some","message","type","typingDuration","prevConversation","currentQuestion","question","handleInputChange","e","fieldName","prevInputs","target","value","handleInputSubmit","event","key","_currentQuestion$inpu","_currentQuestion$inpu2","userResponse","Array","isArray","inputs","shouldSkip","includes","prevSkipped","filter","q","updatedConversation","stringify","prevIndex","newIndex","updatedInputs","input","singleInput","handleOptionClick","option","handleAutoResponse","handleEdit","userMessage","find","handleSaveEdit","map","updatedSkippedQuestions","savedSkippedQuestions","generatePDF","doc","response","fetch","fontBlob","blob","reader","FileReader","Promise","resolve","reject","onload","base64Font","result","split","addFileToVFS","addFont","setFont","setFontSize","yOffset","skippedQuestion","index","formQuestion","questForOther","options","optionIndex","addPage","pdfBlob","output","onerror","Error","readAsDataURL","sendPDFToBackend","FormData","append","method","body","ok","error","handleGenerateAndSendPDF","from","to","note","headers","alert","handleFileSelect","file","prevFiles","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","transform","ref","onScroll","onChange","onKeyDown","pdfUrl","URL","createObjectURL","open","marginTop","senderName","propertyAddress","onClose","label","onFileSelect","strings","autoStart","delay","cursor","i","placeholder","onAutoResponse","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/przemokoduje/certyfikat-1/client/src/pages/chatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./chatPage.scss\";\r\nimport Typewriter from \"typewriter-effect\";\r\nimport formData from \"../../components/formData\";\r\nimport jsPDF from \"jspdf\";\r\nimport EmailForm from \"../../components/emailForm/EmailForm\";\r\nimport AvatarButton from \"../../components/avatarButton/AvatarButton\";\r\nimport FileUploader from \"../../components/fileUploader/FileUploader\";\r\n\r\nexport default function ChatPage() {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [chatVisible, setChatVisible] = useState(false);\r\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\r\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\r\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\r\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\r\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\r\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\r\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\r\n\r\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\r\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\r\n  const userInputRef = useRef(null);\r\n  const [skippedQuestions, setSkippedQuestions] = useState([]); // Lista pytań pominiętych\r\n  const [showEmailForm, setShowEmailForm] = useState(false);\r\n  const chatContainerRef = useRef(null); // Dodaj ref\r\n  const [isUserScrolling, setIsUserScrolling] = useState(false); // Flaga do śledzenia ręcznego przewijania\r\n  const [isReturningUser, setIsReturningUser] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [surname, setSurname] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [uploadedFiles, setUploadedFiles] = useState({\r\n    exteriorPhoto: null,\r\n    propertyLayout: null,\r\n    additionalPhoto: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Funkcja pomocnicza do pobierania odpowiedzi\r\n    const getResponse = () => {\r\n      const userMessages = document.querySelectorAll(\".chat-user-message p\");\r\n      let responses = [];\r\n\r\n      userMessages.forEach((msg) => {\r\n        responses.push(msg.textContent); // Pobieranie treści <p>\r\n      });\r\n\r\n      return responses; // Zwracamy tablicę odpowiedzi użytkownika\r\n    };\r\n\r\n    // Pobierz tablicę odpowiedzi użytkownika\r\n    const responses = getResponse();\r\n\r\n    // Ustal indeksy pytań w formData\r\n    const nameIndex = 1; // Indeks pytania o imię\r\n    const surnameIndex = 2; // Indeks pytania o nazwisko\r\n    const emailIndex = 3; // Indeks pytania o email\r\n    const addressIndex = 5; // Indeks pytania o adres (miasto i ulica)\r\n\r\n    // Wyciągnij odpowiedzi z tablicy 'responses' na podstawie indeksów\r\n    // Ustaw wartości w stanach\r\n    setName(responses[nameIndex] || \"\");\r\n    setSurname(responses[surnameIndex] || \"\");\r\n    setEmail(responses[emailIndex] || \"\");\r\n    setAddress(responses[addressIndex] || \"\");\r\n  }, [currentQuestionIndex]); // Wywołanie, gdy zmieni się currentQuestionIndex\r\n\r\n  // Dodane: Sprawdzenie czy użytkownik jest powracający\r\n  useEffect(() => {\r\n    const userVisitedBefore = localStorage.getItem(\"userVisitedBefore\");\r\n    if (userVisitedBefore) {\r\n      setIsReturningUser(true);\r\n    } else {\r\n      localStorage.setItem(\"userVisitedBefore\", \"true\");\r\n    }\r\n  }, []);\r\n\r\n  const typeSpeed = 150; // Prędkość pisania bota w ms\r\n\r\n  const handleShowEmailForm = () => {\r\n    setShowEmailForm(true);\r\n  };\r\n\r\n  const handleCloseEmailForm = () => {\r\n    setShowEmailForm(false);\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    setShowChat(true);\r\n    setTimeout(() => {\r\n      setChatVisible(true);\r\n    }, 800); // Czas na animację zdjęcia bota\r\n  };\r\n\r\n  // Funkcja do śledzenia, czy użytkownik przewija ręcznie\r\n  const handleScroll = () => {\r\n    setIsUserScrolling(true);\r\n    const chatContainer = chatContainerRef.current;\r\n    const scrollTop = chatContainer.scrollTop;\r\n    const clientHeight = chatContainer.clientHeight;\r\n    const scrollHeight = chatContainer.scrollHeight;\r\n\r\n    console.log(\"scrollTop:\", scrollTop);\r\n    console.log(\"clientHeight:\", clientHeight);\r\n    console.log(\"scrollHeight:\", scrollHeight);\r\n\r\n    if (scrollTop + clientHeight < scrollHeight - 50) {\r\n      console.log(\"Użytkownik przewija ręcznie. Nie jesteśmy na dole czatu.\");\r\n    } else {\r\n      console.log(\"Użytkownik znajduje się blisko lub na dole czatu.\");\r\n    }\r\n\r\n    // if (\r\n    //   chatContainer.scrollTop + chatContainer.clientHeight <\r\n    //   chatContainer.scrollHeight + 10\r\n    // ) {\r\n    //   setIsUserScrolling(true);\r\n    // } else {\r\n    //   setIsUserScrolling(false);\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Sprawdzamy, czy istnieją dane rozmowy w localStorage\r\n    const savedConversation = localStorage.getItem(\"conversation\");\r\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\r\n\r\n    if (savedConversation) {\r\n      setConversation(JSON.parse(savedConversation));\r\n    }\r\n\r\n    if (savedQuestionIndex) {\r\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\r\n    }\r\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\r\n\r\n  useEffect(() => {\r\n    if (userInputVisible) {\r\n      console.log(\"userInput is visible\", userInputVisible);\r\n      // Znajdujemy najbliższą wiadomość bota (ostatnią przed user-input-container)\r\n      const chatContainer = chatContainerRef.current;\r\n      const botMessages = chatContainer.querySelectorAll(\".chat-bot-message\");\r\n      const userMessages = chatContainer.querySelectorAll(\".chat-user-message\");\r\n      const lastBotMessage = botMessages[botMessages.length - 1];\r\n\r\n      const wrapContainer = document.querySelector(\".wrapContainer\"); // wrapContainer\r\n      const wrapContainerRect = wrapContainer.getBoundingClientRect();\r\n\r\n      // Znajdujemy drugą od końca wiadomość bota i użytkownika\r\n      const secondLastBotMessage =\r\n        botMessages.length > 1 ? botMessages[botMessages.length - 2] : null;\r\n      const secondLastUserMessage =\r\n        userMessages.length > 1 ? userMessages[userMessages.length - 2] : null;\r\n\r\n      if (lastBotMessage) {\r\n        // Pobierz pozycję wiadomości bota względem chatContainer\r\n        const botMessageRect = lastBotMessage.getBoundingClientRect();\r\n\r\n        console.log(botMessageRect);\r\n        console.log(wrapContainerRect);\r\n\r\n        // Oblicz różnicę między pozycją wiadomości a pozycją 220px od góry wrapContainer\r\n        const currentOffset = botMessageRect.top - wrapContainerRect.top;\r\n        const targetOffset = 220; // docelowa pozycja 220px od górnej krawędzi\r\n\r\n        let scrollAmount = currentOffset - targetOffset;\r\n\r\n        // Jeśli istnieje druga od końca wiadomość bota, dodaj jej wysokość\r\n        if (secondLastBotMessage) {\r\n          const pElementBot = secondLastBotMessage.querySelector(\"p\"); // Znajduje <p> w secondLastBotMessage\r\n          if (pElementBot) {\r\n            console.log(\r\n              \"Tekst w secondLastBotMessage:\",\r\n              pElementBot.textContent\r\n            ); // Wyświetla tekst\r\n          }\r\n          const secondBotMessageHeight =\r\n            secondLastBotMessage.getBoundingClientRect().height;\r\n          scrollAmount += secondBotMessageHeight;\r\n        }\r\n\r\n        // Jeśli istnieje druga od końca wiadomość użytkownika, dodaj jej wysokość\r\n        if (secondLastUserMessage) {\r\n          const pElementUser = secondLastUserMessage.querySelector(\"p\"); // Znajduje <p> w secondLastUserMessage\r\n          if (pElementUser) {\r\n            console.log(\r\n              \"Tekst w secondLastUserMessage:\",\r\n              pElementUser.textContent\r\n            ); // Wyświetla tekst\r\n          }\r\n          const secondUserMessageHeight =\r\n            secondLastUserMessage.getBoundingClientRect().height;\r\n          scrollAmount += secondUserMessageHeight;\r\n        }\r\n\r\n        console.log(scrollAmount);\r\n\r\n        // Pobierz aktualny styl top\r\n        const currentTop =\r\n          parseInt(window.getComputedStyle(chatContainer).top, 10) || 0;\r\n        const newTop = currentTop - scrollAmount; // Oblicz nową wartość top\r\n\r\n        // Ustaw nową wartość top\r\n        chatContainer.style.top = `${newTop}px`;\r\n        console.log(\"Przesuwanie chatContainer, nowa wartość top:\", newTop);\r\n      }\r\n    }\r\n  }, [userInputVisible]);\r\n\r\n  const calculateScrollOffset = () => {\r\n    if (lastMessageRef.current) {\r\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\r\n      setScrollOffset((prevOffset) => prevOffset + lastMessageHeight);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showChat) {\r\n      setTimeout(() => {\r\n        setHeadPhotoHidden(true);\r\n      }, 2000);\r\n    }\r\n  }, [showChat]);\r\n\r\n  const typeBotMessage = (text, id) => {\r\n    setBotTyping(true);\r\n\r\n    const isQuestionAlreadyAdded = conversation.some(\r\n      (message) => message.type === \"bot\" && message.text === text\r\n    );\r\n\r\n    if (!isQuestionAlreadyAdded) {\r\n      const typingDuration = text.length * typeSpeed + 500;\r\n\r\n      setTimeout(() => {\r\n        setConversation((prevConversation) => [\r\n          ...prevConversation,\r\n          { type: \"bot\", text: text, id: id }, // Dodajemy id do wiadomości bota\r\n        ]);\r\n\r\n        setBotTyping(false);\r\n\r\n        setTimeout(() => {\r\n          setUserInputVisible(true);\r\n        }, 1000);\r\n\r\n        calculateScrollOffset();\r\n      }, typingDuration);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatVisible && currentQuestionIndex < formData.length) {\r\n      setUserInputVisible(false);\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      if (currentQuestion.type === \"text\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      } else if (currentQuestion.type === \"choice\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      }\r\n    }\r\n  }, [currentQuestionIndex, chatVisible]);\r\n\r\n  const handleInputChange = (e, fieldName) => {\r\n    setUserInputs((prevInputs) => ({\r\n      ...prevInputs,\r\n      [fieldName]: e.target.value,\r\n    }));\r\n\r\n    console.log(\"Zmiana wartości dla:\", fieldName, \"na\", e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Sprawdzamy, czy wszystkie pytania zostały odpowiedziane\r\n    if (currentQuestionIndex >= formData.length) {\r\n      console.log(\"Wszystkie pytania zakończone, pokaż skippedQuestions\");\r\n    }\r\n  }, [currentQuestionIndex, formData.length]);\r\n\r\n  const handleInputSubmit = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      const userResponse = {\r\n        type: \"user\",\r\n        text:\r\n          Array.isArray(currentQuestion.inputs) &&\r\n          currentQuestion.inputs.length > 1\r\n            ? `${userInputs[currentQuestion.inputs[0].fieldName] || \"\"}, ${\r\n                userInputs[currentQuestion.inputs[1].fieldName] || \"\"\r\n              }`\r\n            : userInputs[\r\n                currentQuestion.inputs?.[0]?.fieldName || \"singleInput\"\r\n              ] || \"\",\r\n        id: currentQuestion.id,\r\n      };\r\n\r\n      const shouldSkip =\r\n        userResponse.text === \"0\" ||\r\n        [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userResponse.text);\r\n\r\n      console.log(shouldSkip);\r\n      // Natychmiastowa aktualizacja stanu\r\n      setSkippedQuestions((prevSkipped) => {\r\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\r\n          return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy\r\n        } else if (\r\n          !shouldSkip &&\r\n          prevSkipped.includes(currentQuestion.question)\r\n        ) {\r\n          return prevSkipped.filter((q) => q !== currentQuestion.question); // Usuwamy pytanie z listy\r\n        }\r\n        return prevSkipped;\r\n      });\r\n\r\n      // Zapisz odpowiedzi\r\n      setConversation((prevConversation) => {\r\n        const updatedConversation = [...prevConversation, userResponse];\r\n        localStorage.setItem(\r\n          \"conversation\",\r\n          JSON.stringify(updatedConversation)\r\n        );\r\n        localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\r\n        return updatedConversation;\r\n      });\r\n\r\n      // Zmiana currentQuestionIndex\r\n      setCurrentQuestionIndex((prevIndex) => {\r\n        const newIndex = prevIndex + 1;\r\n        localStorage.setItem(\"currentQuestionIndex\", newIndex);\r\n        return newIndex;\r\n      });\r\n\r\n      // Usuwanie tylko danych dla bieżącego pytania, zamiast resetować wszystkie dane\r\n      setUserInputs((prevInputs) => {\r\n        const updatedInputs = { ...prevInputs };\r\n        if (Array.isArray(currentQuestion.inputs)) {\r\n          currentQuestion.inputs.forEach((input) => {\r\n            delete updatedInputs[input.fieldName];\r\n          });\r\n        } else {\r\n          delete updatedInputs.singleInput;\r\n        }\r\n        return updatedInputs;\r\n      });\r\n\r\n      setUserInputVisible(false);\r\n\r\n      if (currentQuestionIndex < formData.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      } else {\r\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n      }\r\n\r\n      calculateScrollOffset();\r\n    }\r\n  };\r\n\r\n  const handleOptionClick = (option) => {\r\n    const currentQuestion = formData[currentQuestionIndex];\r\n\r\n    const userResponse = {\r\n      type: \"user\",\r\n      text: option,\r\n      id: currentQuestion.id,\r\n    };\r\n\r\n    const shouldSkip = [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(\r\n      option\r\n    );\r\n\r\n    setSkippedQuestions((prevSkipped) => {\r\n      if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\r\n        return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy\r\n      } else if (\r\n        !shouldSkip &&\r\n        prevSkipped.includes(currentQuestion.question)\r\n      ) {\r\n        return prevSkipped.filter((q) => q !== currentQuestion.question); // Usuwamy pytanie z listy\r\n      }\r\n      return prevSkipped;\r\n    });\r\n\r\n    setConversation((prevConversation) => {\r\n      const updatedConversation = [...prevConversation, userResponse];\r\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\r\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\r\n      return updatedConversation;\r\n    });\r\n\r\n    // Zmiana currentQuestionIndex\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      const newIndex = prevIndex + 1;\r\n      localStorage.setItem(\"currentQuestionIndex\", newIndex); // Zapis do localStorage\r\n      return newIndex;\r\n    });\r\n\r\n    setUserInputVisible(false);\r\n\r\n    if (currentQuestionIndex < formData.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n    }\r\n\r\n    calculateScrollOffset();\r\n  };\r\n\r\n  const handleAutoResponse = () => {\r\n    const currentQuestion = formData[currentQuestionIndex];\r\n\r\n    // Tworzymy automatyczną odpowiedź\r\n    const userResponse = {\r\n      type: \"user\",\r\n      text: \"Nie znam odpowiedzi\",\r\n      id: currentQuestion.id,\r\n    };\r\n\r\n    // Sprawdzenie, czy odpowiedź powinna być pominięta\r\n    const shouldSkip = [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(\r\n      userResponse.text\r\n    );\r\n    // Aktualizacja listy pytań pominiętych\r\n    setSkippedQuestions((prevSkipped) => {\r\n      if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\r\n        return [...prevSkipped, currentQuestion.question]; // Dodajemy pytanie do listy pominiętych\r\n      }\r\n      return prevSkipped;\r\n    });\r\n\r\n    // Aktualizujemy stan rozmowy\r\n    setConversation((prevConversation) => {\r\n      const updatedConversation = [...prevConversation, userResponse];\r\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\r\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\r\n      return updatedConversation;\r\n    });\r\n\r\n    // Zwiększamy indeks pytania\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      const newIndex = prevIndex + 1;\r\n      localStorage.setItem(\"currentQuestionIndex\", newIndex);\r\n      return newIndex;\r\n    });\r\n\r\n    // Ukryjemy input po automatycznej odpowiedzi\r\n    setUserInputVisible(false);\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    setEditMode(true);\r\n    setEditIndex(id);\r\n\r\n    const userMessage = conversation.find(\r\n      (msg) => msg.type === \"user\" && msg.id === id\r\n    );\r\n\r\n    if (userMessage) {\r\n      setUserInputs({ singleInput: userMessage.text });\r\n    }\r\n  };\r\n\r\n  const handleSaveEdit = (id) => {\r\n    setConversation((prevConversation) => {\r\n      const updatedConversation = prevConversation.map((msg) =>\r\n        msg.id === id && msg.type === \"user\"\r\n          ? { ...msg, text: userInputs.singleInput }\r\n          : msg\r\n      );\r\n\r\n      const currentQuestion = formData.find((q) => q.id === id);\r\n\r\n      // Warunki, które kwalifikują pytanie do listy pytań pominiętych\r\n      const shouldSkip =\r\n        userInputs.singleInput === \"0\" ||\r\n        [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(\r\n          userInputs.singleInput\r\n        );\r\n\r\n      setSkippedQuestions((prevSkipped) => {\r\n        let updatedSkippedQuestions;\r\n\r\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\r\n          // Dodanie pytania na listę, jeśli powinno być pominięte\r\n          updatedSkippedQuestions = [...prevSkipped, currentQuestion.question];\r\n        } else if (\r\n          !shouldSkip &&\r\n          prevSkipped.includes(currentQuestion.question)\r\n        ) {\r\n          // Usunięcie pytania z listy, jeśli nie powinno być pominięte\r\n          updatedSkippedQuestions = prevSkipped.filter(\r\n            (question) => question !== currentQuestion.question\r\n          );\r\n        } else {\r\n          updatedSkippedQuestions = prevSkipped;\r\n        }\r\n\r\n        return updatedSkippedQuestions; // Tylko aktualizacja stanu\r\n      });\r\n\r\n      // Zapisanie zaktualizowanej rozmowy do localStorage\r\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\r\n\r\n      return updatedConversation;\r\n    });\r\n\r\n    setEditMode(false);\r\n    setEditIndex(null);\r\n    // setUserInputs({});\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Sprawdzamy, czy istnieją dane rozmowy i lista pytań pominiętych w localStorage\r\n    const savedConversation = localStorage.getItem(\"conversation\");\r\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\r\n    const savedSkippedQuestions = localStorage.getItem(\"skippedQuestions\");\r\n\r\n    if (savedConversation) {\r\n      setConversation(JSON.parse(savedConversation));\r\n    }\r\n\r\n    if (savedQuestionIndex) {\r\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\r\n    }\r\n\r\n    if (savedSkippedQuestions) {\r\n      setSkippedQuestions(JSON.parse(savedSkippedQuestions)); // Przywracamy listę pytań pominiętych\r\n    }\r\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\r\n\r\n  useEffect(() => {\r\n    // Zapisujemy listę pytań pominiętych do localStorage, jeśli się zmienia\r\n    if (skippedQuestions && skippedQuestions.length > 0) {\r\n      localStorage.setItem(\r\n        \"skippedQuestions\",\r\n        JSON.stringify(skippedQuestions)\r\n      );\r\n    }\r\n  }, [skippedQuestions]);\r\n\r\n  console.log(currentQuestionIndex);\r\n  console.log(formData.length);\r\n\r\n  const generatePDF = async (skippedQuestions) => {\r\n    const doc = new jsPDF();\r\n\r\n    // Pobierz czcionkę Roboto w formacie .ttf\r\n    const response = await fetch(\"/fonts/Roboto-Regular.ttf\");\r\n    const fontBlob = await response.blob();\r\n    const reader = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      reader.onload = function () {\r\n        const base64Font = reader.result.split(\",\")[1];\r\n\r\n        // Dodaj czcionkę do jsPDF\r\n        doc.addFileToVFS(\"Roboto-Regular.ttf\", base64Font);\r\n        doc.addFont(\"Roboto-Regular.ttf\", \"Roboto\", \"normal\");\r\n        doc.setFont(\"Roboto\");\r\n\r\n        // Ustaw rozmiar czcionki\r\n        doc.setFontSize(14);\r\n\r\n        // Dodaj tekst do dokumentu\r\n        doc.text(\"Lista pytań\", 20, 20);\r\n\r\n        let yOffset = 30;\r\n        // skippedQuestions.forEach((question, index) => {\r\n        //   doc.text(`${index + 1}. ${question}`, 20, yOffset);\r\n        //   yOffset += 10;\r\n        // });\r\n\r\n        skippedQuestions.forEach((skippedQuestion, index) => {\r\n          const formQuestion = formData.find(\r\n            (q) => q.question === skippedQuestion\r\n          );\r\n\r\n          // Zwiększenie przesunięcia dla pytania\r\n          yOffset += 10;\r\n\r\n          // Dodaj pytanie\r\n          doc.text(\r\n            `${index + 1}. ${formQuestion?.questForOther || skippedQuestion}`,\r\n            20,\r\n            yOffset\r\n          );\r\n\r\n          // Sprawdź, czy pytanie ma opcje wyboru i dodaj je z odstępami\r\n          if (formQuestion?.options) {\r\n            formQuestion.options.forEach((option, optionIndex) => {\r\n              yOffset += 8; // Dodaj odstęp między opcjami\r\n              doc.text(`- ${option}`, 30, yOffset); // Opcje są wcięte\r\n            });\r\n          }\r\n\r\n          // Jeżeli miejsce na stronie się skończy, dodaj nową stronę\r\n          if (yOffset > 280) {\r\n            doc.addPage();\r\n            yOffset = 20; // Resetuj yOffset na nowej stronie\r\n          }\r\n        });\r\n\r\n        // Generuj PDF jako Blob\r\n        const pdfBlob = doc.output(\"blob\");\r\n        resolve(pdfBlob);\r\n      };\r\n\r\n      reader.onerror = function () {\r\n        reject(new Error(\"Błąd odczytu pliku czcionki\"));\r\n      };\r\n\r\n      reader.readAsDataURL(fontBlob); // Odczytaj czcionkę jako Base64\r\n    });\r\n  };\r\n\r\n  const sendPDFToBackend = async (pdfBlob) => {\r\n    const formData = new FormData();\r\n    formData.append(\"pdf\", pdfBlob, \"pytaniaChat.pdf\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/upload-pdf\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(\"PDF został pomyślnie wysłany na backend.\");\r\n      } else {\r\n        console.error(\"Błąd podczas wysyłania PDF na backend.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Błąd:\", error);\r\n    }\r\n  };\r\n\r\n  const handleGenerateAndSendPDF = async (from, to, note) => {\r\n    try {\r\n      const pdfBlob = await generatePDF(skippedQuestions);\r\n      await sendPDFToBackend(pdfBlob);\r\n\r\n      // Wyślij e-mail po wygenerowaniu PDF\r\n      await fetch(\"http://localhost:3001/api/send-email\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          from,\r\n          to,\r\n          note,\r\n        }),\r\n      });\r\n\r\n      alert(\"PDF wygenerowany i wysłany na maila.\");\r\n      setShowEmailForm(false); // Zamknięcie formularza po wysłaniu\r\n    } catch (error) {\r\n      console.error(\"Błąd podczas generowania lub wysyłania PDF:\", error);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = (file, fieldName) => {\r\n    setUploadedFiles((prevFiles) => ({\r\n      ...prevFiles,\r\n      [fieldName]: file,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatpage\">\r\n      <div className=\"chatback\">\r\n        <img src=\"/images/design7_1.png\" alt=\"Background\" />\r\n      </div>\r\n\r\n      <div className=\"wrapContainer\">\r\n        <div\r\n          className={`headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${\r\n            headPhotoHidden ? \"hidden\" : \"\"\r\n          }`}\r\n        >\r\n          <img src=\"/images/profil.jpg\" alt=\"Profile\" />\r\n        </div>\r\n        <hr className=\"full-width-line\" />\r\n\r\n        {/* Wyświetlanie różnych powitań w zależności od nowego/powracającego użytkownika */}\r\n        <div\r\n          className={`infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`}\r\n        >\r\n          {isReturningUser ? (\r\n            <span>\r\n              Witamy ponownie! Cieszymy się, że wróciłeś do naszej aplikacji.\r\n              Możemy kontynuować, gdzie skończyłeś.\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              Witamy w naszej aplikacji! Zacznij swoją podróż, odpowiadając na\r\n              kilka pytań.\r\n            </span>\r\n          )}\r\n          <button onClick={handleNextClick}>Dalej</button>\r\n        </div>\r\n\r\n        {chatVisible && (\r\n          <>\r\n            <div\r\n              className=\"chatContainer chat-visible\"\r\n              style={{ transform: `translateY(-${scrollOffset}px)` }}\r\n              ref={chatContainerRef}\r\n              onScroll={handleScroll}\r\n            >\r\n              {conversation.map((message, index) => (\r\n                <div\r\n                  className={`chat-message ${\r\n                    message.type === \"bot\"\r\n                      ? \"chat-bot-message\"\r\n                      : \"chat-user-message\"\r\n                  }`}\r\n                  ref={\r\n                    index === conversation.length - 1 ? lastMessageRef : null\r\n                  }\r\n                >\r\n                  {message.type === \"bot\" ? (\r\n                    <>\r\n                      <div className=\"bot-avatar\">\r\n                        <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                      </div>\r\n                      <p className=\"lato-light\">{message.text}</p>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      {editMode && editIndex === message.id ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                              handleSaveEdit(message.id);\r\n                            }\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <p className=\"lato-light\">{message.text}</p>\r\n                      )}\r\n                      {message.type === \"user\" && (\r\n                        <div className=\"user-avatar\">\r\n                          <button onClick={() => handleEdit(message.id)}>\r\n                            <img src=\"/images/account.png\" alt=\"User Avatar\" />\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              {currentQuestionIndex >= formData.length &&\r\n                (skippedQuestions.length > 0 ? (\r\n                  <>\r\n                    <div className=\"chat-bot-message\">\r\n                      <div className=\"head-summary\">\r\n                        <div className=\"bot-avatar\">\r\n                          <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                        </div>\r\n                        <p className=\"lato-light\">\r\n                          Dziękuję za poświęcony czas. Oto lista pytań do\r\n                          zarządcy:\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"summary\">\r\n                      <button\r\n                        onClick={async () => {\r\n                          const pdfBlob = await generatePDF(skippedQuestions);\r\n                          const pdfUrl = URL.createObjectURL(pdfBlob);\r\n                          window.open(pdfUrl, \"_blank\");\r\n                        }}\r\n                      >\r\n                        Otwórz PDF\r\n                      </button>\r\n\r\n                      <p\r\n                        className=\"form lato-light\"\r\n                        style={{ marginTop: \"15px\" }}\r\n                      >\r\n                        Oto formularz do wysyłki pliku do zarządcy:\r\n                      </p>\r\n\r\n                      {/* Sprawdzenie wartości przekazywanych do EmailForm */}\r\n                      {console.log(\"Dane przekazywane do EmailForm:\", {\r\n                        senderName: `${userInputs[\"imie\"] || \"\"} ${\r\n                          userInputs[\"nazwisko\"] || \"\"\r\n                        }`,\r\n                        propertyAddress: `${userInputs[\"miasto\"] || \"\"}, ${\r\n                          userInputs[\"ulica\"] || \"\"\r\n                        }`,\r\n                        from: userInputs[\"email\"] || \"\",\r\n                      })}\r\n                      {/* Wyświetlamy formularz EmailForm */}\r\n                      <EmailForm\r\n                        onClose={handleCloseEmailForm}\r\n                        handleGenerateAndSendPDF={handleGenerateAndSendPDF}\r\n                        senderName={`${name} ${surname}`}\r\n                        propertyAddress={address}\r\n                        from={email}\r\n                      />\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"chat-bot-message\">\r\n                      <div className=\"bot-avatar\">\r\n                        <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                      </div>\r\n                      <p className=\"lato-regular\">\r\n                        Dziękujemy za wypełnienie ankiety oraz poświęcony czas.\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"summary\">\r\n                      <p className=\"lato-regular\">\r\n                        Prześlij dodatkowe zdjęcia:\r\n                      </p>\r\n\r\n                      {/* Przykładowe przyciski do uploadu zdjęć */}\r\n                      <div className=\"summary-buttons\">\r\n                        <FileUploader\r\n                          label=\"Zdjęcie nieruchomości z zewnątrz\"\r\n                          onFileSelect={(file) =>\r\n                            handleFileSelect(file, \"exteriorPhoto\")\r\n                          }\r\n                        />\r\n                        <FileUploader\r\n                          label=\"Rzut nieruchomości\"\r\n                          onFileSelect={(file) =>\r\n                            handleFileSelect(file, \"propertyLayout\")\r\n                          }\r\n                        />\r\n                        <FileUploader\r\n                          label=\"Dodatkowe zdjęcie\"\r\n                          onFileSelect={(file) =>\r\n                            handleFileSelect(file, \"additionalPhoto\")\r\n                          }\r\n                        />\r\n                      </div>\r\n\r\n                      {/* Przycisk Wyslij - funkcjonalność dodamy w następnym etapie */}\r\n                      <p></p>\r\n                      <button className=\"send\">Wyślij</button>\r\n                    </div>\r\n                  </>\r\n                ))}\r\n\r\n              {/* {currentQuestionIndex >= formData.length &&\r\n                skippedQuestions.length > 0 && (\r\n                  <div className=\"skipped-questions\">\r\n                    <h3>Lista pytań pominiętych:</h3>\r\n                    <ul>\r\n                      {skippedQuestions.map((skippedQuestion, index) => {\r\n                        // Znajdujemy odpowiednie pytanie w formData\r\n                        const formQuestion = formData.find(\r\n                          (q) => q.question === skippedQuestion\r\n                        );\r\n\r\n                        return (\r\n                          <li key={index}>\r\n                            <strong>\r\n                              {formQuestion?.questForOther || skippedQuestion}\r\n                            </strong>\r\n                            {formQuestion?.options && (\r\n                              <ul>\r\n                                {formQuestion.options.map((option, i) => (\r\n                                  <li key={i}>{option}</li>\r\n                                ))}\r\n                              </ul>\r\n                            )}\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                    <button onClick={handleShowEmailForm}>\r\n                      Generuj i Wyślij PDF do zarządcy\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              {showEmailForm && (\r\n                <EmailForm\r\n                  onClose={handleCloseEmailForm}\r\n                  handleGenerateAndSendPDF={handleGenerateAndSendPDF}\r\n                />\r\n              )} */}\r\n\r\n              {botTyping && (\r\n                <div className=\"chat-bot-message\">\r\n                  <div className=\"bot-avatar\">\r\n                    <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                  </div>\r\n                  <div className=\"typing-text lato-light\">\r\n                    <Typewriter\r\n                      options={{\r\n                        strings: [formData[currentQuestionIndex].question],\r\n                        autoStart: true,\r\n                        delay: typeSpeed,\r\n                        cursor: \" \",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {userInputVisible && !editMode && (\r\n                <div className=\"user-input-container\" ref={userInputRef}>\r\n                  {formData[currentQuestionIndex].type === \"choice\" ? (\r\n                    <div\r\n                      className={`choice-container ${\r\n                        currentQuestionIndex === 0\r\n                          ? \"row-layout\"\r\n                          : \"column-layout\"\r\n                      }`}\r\n                    >\r\n                      {Array.isArray(formData[currentQuestionIndex].options) &&\r\n                        formData[currentQuestionIndex].options.map(\r\n                          (option, index) => (\r\n                            <button\r\n                              key={index}\r\n                              onClick={() => handleOptionClick(option)}\r\n                              className=\"lato-light\"\r\n                            >\r\n                              {option}\r\n                            </button>\r\n                          )\r\n                        )}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"chat-user-message\">\r\n                      {formData[currentQuestionIndex].inputs &&\r\n                      Array.isArray(formData[currentQuestionIndex].inputs) ? (\r\n                        formData[currentQuestionIndex].inputs.map(\r\n                          (input, i) => (\r\n                            <input\r\n                              key={i}\r\n                              type=\"text\"\r\n                              className={`user-input ${\r\n                                formData[currentQuestionIndex].inputs.length ===\r\n                                1\r\n                                  ? \"full-width\"\r\n                                  : \"half-width\"\r\n                              }`}\r\n                              placeholder={input.placeholder}\r\n                              value={userInputs[input.fieldName] || \"\"}\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, input.fieldName)\r\n                              }\r\n                              onKeyDown={handleInputSubmit}\r\n                            />\r\n                          )\r\n                        )\r\n                      ) : (\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"user-input full-width\"\r\n                          placeholder=\"Your response...\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={handleInputSubmit}\r\n                        />\r\n                      )}\r\n                      <AvatarButton onAutoResponse={handleAutoResponse} />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}