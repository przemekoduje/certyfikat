{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/certifikat/client/src/formComponent2/FormComponent2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./formComponent2.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormComponent({\n  updateProgress\n}) {\n  _s();\n  const totalChars = 100; // Załóżmy, że chcemy policzyć 100 znaków w sumie\n  const [formData, setFormData] = useState({\n    field1: \"\",\n    field2: \"\",\n    field3: \"\",\n    field4: \"\",\n    field5: \"\",\n    field6: \"\",\n    field7: \"\",\n    field8: \"\",\n    field9: \"\",\n    field10: \"\"\n  });\n\n  // Funkcja do obsługi zmian w formularzu\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Obliczamy łączną liczbę wpisanych znaków\n  useEffect(() => {\n    const totalFilledChars = Object.values(formData).reduce((acc, fieldValue) => acc + fieldValue.length, 0);\n\n    // Aktualizacja postępu na podstawie liczby znaków\n    updateProgress(totalFilledChars, totalChars);\n  }, [formData, updateProgress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"forms\",\n      children: Object.keys(formData).map((field, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: field,\n        value: formData[field],\n        onChange: handleChange // Każda zmiana znaku wprowadza aktualizację\n        ,\n        placeholder: `Field ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(FormComponent, \"Z+CG7ptVc7zDbqluSQsSk8O2euI=\");\n_c = FormComponent;\nvar _c;\n$RefreshReg$(_c, \"FormComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","FormComponent","updateProgress","_s","totalChars","formData","setFormData","field1","field2","field3","field4","field5","field6","field7","field8","field9","field10","handleChange","e","target","name","value","totalFilledChars","Object","values","reduce","acc","fieldValue","length","children","className","keys","map","field","index","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/certifikat/client/src/formComponent2/FormComponent2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./formComponent2.scss\";\n\nexport default function FormComponent({ updateProgress }) {\n  const totalChars = 100; // Załóżmy, że chcemy policzyć 100 znaków w sumie\n  const [formData, setFormData] = useState({\n    field1: \"\",\n    field2: \"\",\n    field3: \"\",\n    field4: \"\",\n    field5: \"\",\n    field6: \"\",\n    field7: \"\",\n    field8: \"\",\n    field9: \"\",\n    field10: \"\",\n  });\n\n  // Funkcja do obsługi zmian w formularzu\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Obliczamy łączną liczbę wpisanych znaków\n  useEffect(() => {\n    const totalFilledChars = Object.values(formData).reduce((acc, fieldValue) => acc + fieldValue.length, 0);\n    \n    // Aktualizacja postępu na podstawie liczby znaków\n    updateProgress(totalFilledChars, totalChars);\n  }, [formData, updateProgress]);\n\n  return (\n    <div>\n      <form className=\"forms\">\n        {Object.keys(formData).map((field, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            name={field}\n            value={formData[field]}\n            onChange={handleChange} // Każda zmiana znaku wprowadza aktualizację\n            placeholder={`Field ${index + 1}`}\n          />\n        ))}\n      </form>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IACvCS,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BZ,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACa,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAC5B,CAAC,CAAC;EACJ,CAAC;;EAED;EACAxB,SAAS,CAAC,MAAM;IACd,MAAMyB,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACnB,QAAQ,CAAC,CAACoB,MAAM,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAKD,GAAG,GAAGC,UAAU,CAACC,MAAM,EAAE,CAAC,CAAC;;IAExG;IACA1B,cAAc,CAACoB,gBAAgB,EAAElB,UAAU,CAAC;EAC9C,CAAC,EAAE,CAACC,QAAQ,EAAEH,cAAc,CAAC,CAAC;EAE9B,oBACEF,OAAA;IAAA6B,QAAA,eACE7B,OAAA;MAAM8B,SAAS,EAAC,OAAO;MAAAD,QAAA,EACpBN,MAAM,CAACQ,IAAI,CAAC1B,QAAQ,CAAC,CAAC2B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACtClC,OAAA;QAEEmC,IAAI,EAAC,MAAM;QACXf,IAAI,EAAEa,KAAM;QACZZ,KAAK,EAAEhB,QAAQ,CAAC4B,KAAK,CAAE;QACvBG,QAAQ,EAAEnB,YAAa,CAAC;QAAA;QACxBoB,WAAW,EAAE,SAASH,KAAK,GAAG,CAAC;MAAG,GAL7BA,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACtC,EAAA,CA/CuBF,aAAa;AAAAyC,EAAA,GAAbzC,aAAa;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}