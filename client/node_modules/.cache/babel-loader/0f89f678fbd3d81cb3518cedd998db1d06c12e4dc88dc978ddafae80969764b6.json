{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\przemokoduje\\\\certyfikat-1\\\\client\\\\src\\\\pages\\\\chatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatPage.scss\";\nimport Typewriter from \"typewriter-effect\";\nimport formData from \"../../components/formData\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatPage() {\n  _s();\n  const [showChat, setShowChat] = useState(false);\n  const [chatVisible, setChatVisible] = useState(false);\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\n\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\n  const userInputRef = useRef(null);\n  const [skippedQuestions, setSkippedQuestions] = useState([]); // Lista pytań pominiętych\n\n  const typeSpeed = 100; // Prędkość pisania bota w ms\n\n  const handleNextClick = () => {\n    setShowChat(true);\n    setTimeout(() => {\n      setChatVisible(true);\n    }, 800); // Czas na animację zdjęcia bota\n  };\n  useEffect(() => {\n    // Sprawdzamy, czy istnieją dane rozmowy w localStorage\n    const savedConversation = localStorage.getItem(\"conversation\");\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n    if (savedQuestionIndex) {\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\n    }\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\n\n  const calculateScrollOffset = () => {\n    if (lastMessageRef.current) {\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\n      setScrollOffset(prevOffset => prevOffset + lastMessageHeight);\n    }\n  };\n\n  // useEffect(() => {\n  //   if (lastMessageRef.current) {\n  //     console.log(\n  //       \"Referencja lastMessageRef jest przypięta do:\",\n  //       lastMessageRef.current\n  //     );\n  //     console.log(\n  //       \"Pozycja elementu:\",\n  //       lastMessageRef.current.getBoundingClientRect()\n  //     );\n\n  //     lastMessageRef.current.scrollIntoView({ behavior: 'smooth' });\n  //   } else {\n  //     console.log(\n  //       \"Referencja lastMessageRef nie jest przypięta do żadnego elementu.\"\n  //     );\n  //   }\n  // }, [conversation]);\n\n  useEffect(() => {\n    const wrapContainer = document.querySelector(\".wrapContainer\"); // Kontener z ograniczoną wysokością\n    const chatContainer = document.querySelector(\".chatContainer\"); // Kontener z wiadomościami\n\n    if (lastMessageRef.current && chatContainer && wrapContainer) {\n      console.log(\"Referencja lastMessageRef jest przypięta do:\", lastMessageRef.current);\n\n      // Pozycja lastMessageRef względem okna przeglądarki\n      const messageRect = lastMessageRef.current.getBoundingClientRect();\n      // Pozycja wrapContainer względem okna przeglądarki\n      const wrapRect = wrapContainer.getBoundingClientRect();\n      console.log(messageRect);\n      console.log(wrapRect);\n      console.log(\"Pozycja elementu względem wrapContainer:\", {\n        top: messageRect.top - wrapRect.top,\n        bottom: messageRect.bottom - wrapRect.top\n      });\n\n      // Jeśli element referencyjny jest poza widocznym obszarem wrapContainer, przewijamy\n      if (messageRect.bottom > wrapRect.bottom || messageRect.top < wrapRect.top) {\n        // Obliczamy offset przesunięcia\n        const offset = messageRect.bottom > wrapRect.bottom ? messageRect.bottom - wrapRect.bottom // Przesunięcie w dół, jeśli element jest poniżej widocznego obszaru\n        : messageRect.top - wrapRect.top; // Przesunięcie w górę, jeśli element jest powyżej widocznego obszaru\n\n        // Przesunięcie chatContainer\n        chatContainer.scrollTop += offset; // Przewinięcie chatContainer o obliczony offset\n      }\n    } else {\n      console.log(\"Referencja lastMessageRef nie jest przypięta do żadnego elementu.\");\n    }\n  }, [conversation]);\n  useEffect(() => {\n    if (showChat) {\n      setTimeout(() => {\n        setHeadPhotoHidden(true);\n      }, 2000);\n    }\n  }, [showChat]);\n  const typeBotMessage = (text, id) => {\n    setBotTyping(true);\n    const isQuestionAlreadyAdded = conversation.some(message => message.type === \"bot\" && message.text === text);\n    if (!isQuestionAlreadyAdded) {\n      const typingDuration = text.length * typeSpeed + 500;\n      setTimeout(() => {\n        setConversation(prevConversation => [...prevConversation, {\n          type: \"bot\",\n          text: text,\n          id: id\n        } // Dodajemy id do wiadomości bota\n        ]);\n        setBotTyping(false);\n        setTimeout(() => {\n          setUserInputVisible(true);\n        }, 1000);\n        calculateScrollOffset();\n      }, typingDuration);\n    }\n  };\n  useEffect(() => {\n    if (chatVisible && currentQuestionIndex < formData.length) {\n      setUserInputVisible(false);\n      const currentQuestion = formData[currentQuestionIndex];\n      if (currentQuestion.type === \"text\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      } else if (currentQuestion.type === \"choice\") {\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\n      }\n    }\n  }, [currentQuestionIndex, chatVisible]);\n  const handleInputChange = (e, fieldName) => {\n    setUserInputs(prevInputs => ({\n      ...prevInputs,\n      [fieldName]: e.target.value\n    }));\n  };\n  const handleInputSubmit = event => {\n    if (event.key === \"Enter\") {\n      var _currentQuestion$inpu, _currentQuestion$inpu2;\n      const currentQuestion = formData[currentQuestionIndex];\n      const userResponse = {\n        type: \"user\",\n        text: userInputs[((_currentQuestion$inpu = currentQuestion.inputs) === null || _currentQuestion$inpu === void 0 ? void 0 : (_currentQuestion$inpu2 = _currentQuestion$inpu[0]) === null || _currentQuestion$inpu2 === void 0 ? void 0 : _currentQuestion$inpu2.fieldName) || \"singleInput\"] || \"\",\n        id: currentQuestion.id\n      };\n      console.log(userResponse);\n      // Sprawdzamy, czy odpowiedź powinna być dodana do pytań pominiętych\n      if (userResponse.text === \"0\") {\n        setSkippedQuestions(prevSkipped => [...prevSkipped, currentQuestion.question]);\n      }\n\n      // Aktualizujemy rozmowę\n      setConversation(prevConversation => {\n        const updatedConversation = [...prevConversation, userResponse];\n\n        // Zapisujemy zaktualizowaną rozmowę do localStorage\n        // Zapisujemy zaktualizowaną rozmowę i indeks pytania do localStorage\n        localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n        localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\n        return updatedConversation;\n      });\n      setUserInputs({});\n      setUserInputVisible(false);\n      if (currentQuestionIndex < formData.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\n      }\n      calculateScrollOffset();\n    }\n  };\n  const handleOptionClick = option => {\n    const currentQuestion = formData[currentQuestionIndex];\n    const userResponse = {\n      type: \"user\",\n      text: option,\n      id: currentQuestion.id\n    };\n\n    // Sprawdzamy, czy odpowiedź powinna być dodana do pytań pominiętych\n    if ([\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(option)) {\n      setSkippedQuestions(prevSkipped => [...prevSkipped, currentQuestion.question]);\n    }\n    setConversation(prevConversation => {\n      const updatedConversation = [...prevConversation, userResponse];\n\n      // Zapisujemy zaktualizowaną rozmowę do localStorage\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\n      return updatedConversation;\n    });\n    setUserInputVisible(false);\n    if (currentQuestionIndex < formData.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\n    }\n    calculateScrollOffset();\n  };\n  const handleEdit = id => {\n    setEditMode(true);\n    setEditIndex(id);\n    const userMessage = conversation.find(msg => msg.type === \"user\" && msg.id === id);\n    if (userMessage) {\n      setUserInputs({\n        singleInput: userMessage.text\n      });\n    }\n  };\n  const handleSaveEdit = id => {\n    setConversation(prevConversation => {\n      const updatedConversation = prevConversation.map(msg => msg.id === id && msg.type === \"user\" ? {\n        ...msg,\n        text: userInputs.singleInput\n      } : msg);\n      const currentQuestion = formData.find(q => q.id === id);\n\n      // Warunki, które kwalifikują pytanie do listy pytań pominiętych\n      const shouldSkip = userInputs.singleInput === \"0\" || [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userInputs.singleInput);\n      setSkippedQuestions(prevSkipped => {\n        let updatedSkippedQuestions;\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\n          // Dodanie pytania na listę, jeśli powinno być pominięte\n          updatedSkippedQuestions = [...prevSkipped, currentQuestion.question];\n        } else if (!shouldSkip && prevSkipped.includes(currentQuestion.question)) {\n          // Usunięcie pytania z listy, jeśli nie powinno być pominięte\n          updatedSkippedQuestions = prevSkipped.filter(question => question !== currentQuestion.question);\n        } else {\n          updatedSkippedQuestions = prevSkipped;\n        }\n        return updatedSkippedQuestions; // Tylko aktualizacja stanu\n      });\n\n      // Zapisanie zaktualizowanej rozmowy do localStorage\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\n      return updatedConversation;\n    });\n    setEditMode(false);\n    setEditIndex(null);\n    setUserInputs({});\n  };\n  useEffect(() => {\n    // Sprawdzamy, czy istnieją dane rozmowy i lista pytań pominiętych w localStorage\n    const savedConversation = localStorage.getItem(\"conversation\");\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\n    const savedSkippedQuestions = localStorage.getItem(\"skippedQuestions\");\n    if (savedConversation) {\n      setConversation(JSON.parse(savedConversation));\n    }\n    if (savedQuestionIndex) {\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\n    }\n    if (savedSkippedQuestions) {\n      setSkippedQuestions(JSON.parse(savedSkippedQuestions)); // Przywracamy listę pytań pominiętych\n    }\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\n\n  useEffect(() => {\n    // Zapisujemy listę pytań pominiętych do localStorage, jeśli się zmienia\n    if (skippedQuestions && skippedQuestions.length > 0) {\n      localStorage.setItem(\"skippedQuestions\", JSON.stringify(skippedQuestions));\n    }\n  }, [skippedQuestions]);\n  const handleScroll = direction => {\n    const chatContainer = document.querySelector(\".chatContainer\");\n    if (!chatContainer) return;\n\n    // Obliczamy pozycję dolnej krawędzi chatContainer względem viewportu\n    const chatBottomPosition = chatContainer.getBoundingClientRect().bottom;\n    console.log(\"chatBottomPosition:\", chatBottomPosition);\n\n    // Przewijaj w górę, jeśli dolna krawędź chatContainer jest dalej niż 250px od górnej krawędzi viewportu\n    if (direction === \"up\" && chatBottomPosition > 300) {\n      const scrollAmount = 30;\n      setScrollOffset(prevOffset => Math.max(prevOffset + scrollAmount, 0));\n    } else if (direction === \"down\") {\n      const scrollAmount = 30;\n      setScrollOffset(prevOffset => prevOffset - scrollAmount);\n    }\n  };\n  console.log(skippedQuestions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatback\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/design7_1.png\",\n        alt: \"Background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${headPhotoHidden ? \"hidden\" : \"\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/profil.jpg\",\n          alt: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"full-width-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Lorem ipsum dolor sit amet consectetur adipisicing elit...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextClick,\n          children: \"Dalej\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), chatVisible && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scroll-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleScroll(\"up\"),\n            children: \"\\u2B06\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleScroll(\"down\"),\n            children: \"\\u2B07\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer chat-visible\",\n          style: {\n            transform: `translateY(-${scrollOffset}px)`\n          },\n          children: [conversation.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${message.type === \"bot\" ? \"chat-bot-message\" : \"chat-user-message\"}`,\n            ref: index === conversation.length - 1 ? lastMessageRef : null,\n            children: message.type === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bot-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/profil.jpg\",\n                  alt: \"Bot Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [editMode && editIndex === message.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: e => {\n                  if (e.key === \"Enter\") {\n                    handleSaveEdit(message.id);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lato-light\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 25\n              }, this), message.type === \"user\" && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEdit(message.id),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: \"/images/account.png\",\n                    alt: \"User Avatar\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 445,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this)), currentQuestionIndex === formData.length && skippedQuestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"skipped-questions\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Lista pyta\\u0144 pomini\\u0119tych:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: skippedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: question\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 19\n          }, this), botTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-bot-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bot-avatar\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/profil.jpg\",\n                alt: \"Bot Avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-text lato-light\",\n              children: /*#__PURE__*/_jsxDEV(Typewriter, {\n                options: {\n                  strings: [formData[currentQuestionIndex].question],\n                  autoStart: true,\n                  delay: typeSpeed,\n                  cursor: \" \"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this), userInputVisible && !editMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-input-container\",\n            ref: userInputRef,\n            children: formData[currentQuestionIndex].type === \"choice\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"choice-container\",\n              children: Array.isArray(formData[currentQuestionIndex].options) && formData[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleOptionClick(option),\n                className: \"lato-light\",\n                children: option\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user-message\",\n              children: [formData[currentQuestionIndex].inputs && Array.isArray(formData[currentQuestionIndex].inputs) ? formData[currentQuestionIndex].inputs.map((input, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `user-input ${formData[currentQuestionIndex].inputs.length === 1 ? \"full-width\" : \"half-width\"}`,\n                placeholder: input.placeholder,\n                value: userInputs[input.fieldName] || \"\",\n                onChange: e => handleInputChange(e, input.fieldName),\n                onKeyDown: handleInputSubmit\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 29\n              }, this)) : /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"user-input full-width\",\n                placeholder: \"Your response...\",\n                value: userInputs.singleInput || \"\",\n                onChange: e => setUserInputs({\n                  singleInput: e.target.value\n                }),\n                onKeyDown: handleInputSubmit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-avatar\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/images/account.png\",\n                  alt: \"User Avatar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"E7rEfXlN45UI5U+F11Av4UbW9Dg=\");\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Typewriter","formData","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","showChat","setShowChat","chatVisible","setChatVisible","conversation","setConversation","headPhotoHidden","setHeadPhotoHidden","currentQuestionIndex","setCurrentQuestionIndex","userInputs","setUserInputs","userInputVisible","setUserInputVisible","botTyping","setBotTyping","scrollOffset","setScrollOffset","lastMessageRef","editMode","setEditMode","editIndex","setEditIndex","userInputRef","skippedQuestions","setSkippedQuestions","typeSpeed","handleNextClick","setTimeout","savedConversation","localStorage","getItem","savedQuestionIndex","JSON","parse","calculateScrollOffset","current","lastMessageHeight","offsetHeight","prevOffset","wrapContainer","document","querySelector","chatContainer","console","log","messageRect","getBoundingClientRect","wrapRect","top","bottom","offset","scrollTop","typeBotMessage","text","id","isQuestionAlreadyAdded","some","message","type","typingDuration","length","prevConversation","currentQuestion","question","handleInputChange","e","fieldName","prevInputs","target","value","handleInputSubmit","event","key","_currentQuestion$inpu","_currentQuestion$inpu2","userResponse","inputs","prevSkipped","updatedConversation","setItem","stringify","handleOptionClick","option","includes","handleEdit","userMessage","find","msg","singleInput","handleSaveEdit","map","q","shouldSkip","updatedSkippedQuestions","filter","savedSkippedQuestions","handleScroll","direction","chatBottomPosition","scrollAmount","Math","max","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","transform","index","ref","onChange","onKeyDown","options","strings","autoStart","delay","cursor","Array","isArray","input","i","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/przemokoduje/certyfikat-1/client/src/pages/chatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./chatPage.scss\";\r\nimport Typewriter from \"typewriter-effect\";\r\nimport formData from \"../../components/formData\";\r\n\r\nexport default function ChatPage() {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [chatVisible, setChatVisible] = useState(false);\r\n  const [conversation, setConversation] = useState([]); // Przechowywanie całej rozmowy\r\n  const [headPhotoHidden, setHeadPhotoHidden] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Indeks aktualnego pytania\r\n  const [userInputs, setUserInputs] = useState({}); // Przechowywanie wartości wprowadzonych przez użytkownika\r\n  const [userInputVisible, setUserInputVisible] = useState(false); // Kontrola pola tekstowego\r\n  const [botTyping, setBotTyping] = useState(false); // Kontrola, czy bot pisze\r\n  const [scrollOffset, setScrollOffset] = useState(0); // Stan przesunięcia do góry\r\n  const lastMessageRef = useRef(null); // Referencja do ostatniej wiadomości\r\n\r\n  const [editMode, setEditMode] = useState(false); // Czy edycja jest aktywna\r\n  const [editIndex, setEditIndex] = useState(null); // Indeks pytania, które jest edytowane\r\n  const userInputRef = useRef(null);\r\n  const [skippedQuestions, setSkippedQuestions] = useState([]); // Lista pytań pominiętych\r\n\r\n  const typeSpeed = 100; // Prędkość pisania bota w ms\r\n\r\n\r\n\r\n  const handleNextClick = () => {\r\n    setShowChat(true);\r\n    setTimeout(() => {\r\n      setChatVisible(true);\r\n    }, 800); // Czas na animację zdjęcia bota\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Sprawdzamy, czy istnieją dane rozmowy w localStorage\r\n    const savedConversation = localStorage.getItem(\"conversation\");\r\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\r\n\r\n    if (savedConversation) {\r\n      setConversation(JSON.parse(savedConversation));\r\n    }\r\n\r\n    if (savedQuestionIndex) {\r\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\r\n    }\r\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\r\n\r\n  const calculateScrollOffset = () => {\r\n    if (lastMessageRef.current) {\r\n      const lastMessageHeight = lastMessageRef.current.offsetHeight;\r\n      setScrollOffset((prevOffset) => prevOffset + lastMessageHeight);\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (lastMessageRef.current) {\r\n  //     console.log(\r\n  //       \"Referencja lastMessageRef jest przypięta do:\",\r\n  //       lastMessageRef.current\r\n  //     );\r\n  //     console.log(\r\n  //       \"Pozycja elementu:\",\r\n  //       lastMessageRef.current.getBoundingClientRect()\r\n  //     );\r\n\r\n  //     lastMessageRef.current.scrollIntoView({ behavior: 'smooth' });\r\n  //   } else {\r\n  //     console.log(\r\n  //       \"Referencja lastMessageRef nie jest przypięta do żadnego elementu.\"\r\n  //     );\r\n  //   }\r\n  // }, [conversation]);\r\n\r\n  useEffect(() => {\r\n    const wrapContainer = document.querySelector(\".wrapContainer\"); // Kontener z ograniczoną wysokością\r\n    const chatContainer = document.querySelector(\".chatContainer\"); // Kontener z wiadomościami\r\n\r\n    if (lastMessageRef.current && chatContainer && wrapContainer) {\r\n      console.log(\r\n        \"Referencja lastMessageRef jest przypięta do:\",\r\n        lastMessageRef.current\r\n      );\r\n\r\n      // Pozycja lastMessageRef względem okna przeglądarki\r\n      const messageRect = lastMessageRef.current.getBoundingClientRect();\r\n      // Pozycja wrapContainer względem okna przeglądarki\r\n      const wrapRect = wrapContainer.getBoundingClientRect();\r\n      console.log(messageRect);\r\n      console.log(wrapRect);\r\n      console.log(\"Pozycja elementu względem wrapContainer:\", {\r\n        top: messageRect.top - wrapRect.top,\r\n        bottom: messageRect.bottom - wrapRect.top,\r\n      });\r\n\r\n      // Jeśli element referencyjny jest poza widocznym obszarem wrapContainer, przewijamy\r\n      if (\r\n        messageRect.bottom > wrapRect.bottom ||\r\n        messageRect.top < wrapRect.top\r\n      ) {\r\n        // Obliczamy offset przesunięcia\r\n        const offset =\r\n          messageRect.bottom > wrapRect.bottom\r\n            ? messageRect.bottom - wrapRect.bottom // Przesunięcie w dół, jeśli element jest poniżej widocznego obszaru\r\n            : messageRect.top - wrapRect.top; // Przesunięcie w górę, jeśli element jest powyżej widocznego obszaru\r\n\r\n        // Przesunięcie chatContainer\r\n        chatContainer.scrollTop += offset; // Przewinięcie chatContainer o obliczony offset\r\n      }\r\n    } else {\r\n      console.log(\r\n        \"Referencja lastMessageRef nie jest przypięta do żadnego elementu.\"\r\n      );\r\n    }\r\n  }, [conversation]);\r\n\r\n  useEffect(() => {\r\n    if (showChat) {\r\n      setTimeout(() => {\r\n        setHeadPhotoHidden(true);\r\n      }, 2000);\r\n    }\r\n  }, [showChat]);\r\n\r\n  const typeBotMessage = (text, id) => {\r\n    setBotTyping(true);\r\n\r\n    const isQuestionAlreadyAdded = conversation.some(\r\n      (message) => message.type === \"bot\" && message.text === text\r\n    );\r\n\r\n    if (!isQuestionAlreadyAdded) {\r\n      const typingDuration = text.length * typeSpeed + 500;\r\n\r\n      setTimeout(() => {\r\n        setConversation((prevConversation) => [\r\n          ...prevConversation,\r\n          { type: \"bot\", text: text, id: id }, // Dodajemy id do wiadomości bota\r\n        ]);\r\n\r\n        setBotTyping(false);\r\n\r\n        setTimeout(() => {\r\n          setUserInputVisible(true);\r\n        }, 1000);\r\n\r\n        calculateScrollOffset();\r\n      }, typingDuration);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatVisible && currentQuestionIndex < formData.length) {\r\n      setUserInputVisible(false);\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      if (currentQuestion.type === \"text\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      } else if (currentQuestion.type === \"choice\") {\r\n        typeBotMessage(currentQuestion.question, currentQuestion.id);\r\n      }\r\n    }\r\n  }, [currentQuestionIndex, chatVisible]);\r\n\r\n  const handleInputChange = (e, fieldName) => {\r\n    setUserInputs((prevInputs) => ({\r\n      ...prevInputs,\r\n      [fieldName]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleInputSubmit = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      const currentQuestion = formData[currentQuestionIndex];\r\n\r\n      const userResponse = {\r\n        type: \"user\",\r\n        text:\r\n          userInputs[currentQuestion.inputs?.[0]?.fieldName || \"singleInput\"] ||\r\n          \"\",\r\n        id: currentQuestion.id,\r\n      };\r\n\r\n      console.log(userResponse)\r\n      // Sprawdzamy, czy odpowiedź powinna być dodana do pytań pominiętych\r\n      if (userResponse.text === \"0\") {\r\n        setSkippedQuestions((prevSkipped) => [\r\n          ...prevSkipped,\r\n          currentQuestion.question,\r\n        ]);\r\n      }\r\n\r\n      // Aktualizujemy rozmowę\r\n      setConversation((prevConversation) => {\r\n        const updatedConversation = [...prevConversation, userResponse];\r\n\r\n        // Zapisujemy zaktualizowaną rozmowę do localStorage\r\n        // Zapisujemy zaktualizowaną rozmowę i indeks pytania do localStorage\r\n        localStorage.setItem(\r\n          \"conversation\",\r\n          JSON.stringify(updatedConversation)\r\n        );\r\n        localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\r\n\r\n        return updatedConversation;\r\n      });\r\n\r\n      setUserInputs({});\r\n      setUserInputVisible(false);\r\n\r\n      if (currentQuestionIndex < formData.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      } else {\r\n        console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n      }\r\n\r\n      calculateScrollOffset();\r\n    }\r\n  };\r\n\r\n  const handleOptionClick = (option) => {\r\n    const currentQuestion = formData[currentQuestionIndex];\r\n\r\n    const userResponse = {\r\n      type: \"user\",\r\n      text: option,\r\n      id: currentQuestion.id,\r\n    };\r\n\r\n    // Sprawdzamy, czy odpowiedź powinna być dodana do pytań pominiętych\r\n    if ([\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(option)) {\r\n      setSkippedQuestions((prevSkipped) => [\r\n        ...prevSkipped,\r\n        currentQuestion.question,\r\n      ]);\r\n    }\r\n\r\n    setConversation((prevConversation) => {\r\n      const updatedConversation = [...prevConversation, userResponse];\r\n\r\n      // Zapisujemy zaktualizowaną rozmowę do localStorage\r\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\r\n      localStorage.setItem(\"currentQuestionIndex\", currentQuestionIndex + 1);\r\n\r\n      return updatedConversation;\r\n    });\r\n\r\n    setUserInputVisible(false);\r\n\r\n    if (currentQuestionIndex < formData.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      console.log(\"Koniec pytań. Rozmowa zakończona.\");\r\n    }\r\n\r\n    calculateScrollOffset();\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    setEditMode(true);\r\n    setEditIndex(id);\r\n\r\n    const userMessage = conversation.find(\r\n      (msg) => msg.type === \"user\" && msg.id === id\r\n    );\r\n\r\n    if (userMessage) {\r\n      setUserInputs({ singleInput: userMessage.text });\r\n    }\r\n  };\r\n\r\n  const handleSaveEdit = (id) => {\r\n    setConversation((prevConversation) => {\r\n      const updatedConversation = prevConversation.map((msg) =>\r\n        msg.id === id && msg.type === \"user\"\r\n          ? { ...msg, text: userInputs.singleInput }\r\n          : msg\r\n      );\r\n  \r\n      const currentQuestion = formData.find((q) => q.id === id);\r\n  \r\n      // Warunki, które kwalifikują pytanie do listy pytań pominiętych\r\n      const shouldSkip =\r\n        userInputs.singleInput === \"0\" ||\r\n        [\"Nie\", \"Nie wiem\", \"Nie znam odpowiedzi\"].includes(userInputs.singleInput);\r\n  \r\n      setSkippedQuestions((prevSkipped) => {\r\n        let updatedSkippedQuestions;\r\n        \r\n        if (shouldSkip && !prevSkipped.includes(currentQuestion.question)) {\r\n          // Dodanie pytania na listę, jeśli powinno być pominięte\r\n          updatedSkippedQuestions = [...prevSkipped, currentQuestion.question];\r\n        } else if (!shouldSkip && prevSkipped.includes(currentQuestion.question)) {\r\n          // Usunięcie pytania z listy, jeśli nie powinno być pominięte\r\n          updatedSkippedQuestions = prevSkipped.filter(\r\n            (question) => question !== currentQuestion.question\r\n          );\r\n        } else {\r\n          updatedSkippedQuestions = prevSkipped;\r\n        }\r\n  \r\n        return updatedSkippedQuestions; // Tylko aktualizacja stanu\r\n      });\r\n  \r\n      // Zapisanie zaktualizowanej rozmowy do localStorage\r\n      localStorage.setItem(\"conversation\", JSON.stringify(updatedConversation));\r\n  \r\n      return updatedConversation;\r\n    });\r\n  \r\n    setEditMode(false);\r\n    setEditIndex(null);\r\n    setUserInputs({});\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Sprawdzamy, czy istnieją dane rozmowy i lista pytań pominiętych w localStorage\r\n    const savedConversation = localStorage.getItem(\"conversation\");\r\n    const savedQuestionIndex = localStorage.getItem(\"currentQuestionIndex\");\r\n    const savedSkippedQuestions = localStorage.getItem(\"skippedQuestions\");\r\n  \r\n    if (savedConversation) {\r\n      setConversation(JSON.parse(savedConversation));\r\n    }\r\n  \r\n    if (savedQuestionIndex) {\r\n      setCurrentQuestionIndex(JSON.parse(savedQuestionIndex));\r\n    }\r\n  \r\n    if (savedSkippedQuestions) {\r\n      setSkippedQuestions(JSON.parse(savedSkippedQuestions)); // Przywracamy listę pytań pominiętych\r\n    }\r\n  }, []); // Wywołanie tylko raz przy załadowaniu strony\r\n  \r\n\r\n  useEffect(() => {\r\n  // Zapisujemy listę pytań pominiętych do localStorage, jeśli się zmienia\r\n  if (skippedQuestions && skippedQuestions.length > 0) {\r\n    localStorage.setItem(\"skippedQuestions\", JSON.stringify(skippedQuestions));\r\n  }\r\n}, [skippedQuestions]);\r\n  \r\n  \r\n  \r\n  \r\n\r\n  const handleScroll = (direction) => {\r\n    const chatContainer = document.querySelector(\".chatContainer\");\r\n    if (!chatContainer) return;\r\n\r\n    // Obliczamy pozycję dolnej krawędzi chatContainer względem viewportu\r\n    const chatBottomPosition = chatContainer.getBoundingClientRect().bottom;\r\n\r\n    console.log(\"chatBottomPosition:\", chatBottomPosition);\r\n\r\n    // Przewijaj w górę, jeśli dolna krawędź chatContainer jest dalej niż 250px od górnej krawędzi viewportu\r\n    if (direction === \"up\" && chatBottomPosition > 300) {\r\n      const scrollAmount = 30;\r\n      setScrollOffset((prevOffset) => Math.max(prevOffset + scrollAmount, 0));\r\n    } else if (direction === \"down\") {\r\n      const scrollAmount = 30;\r\n      setScrollOffset((prevOffset) => prevOffset - scrollAmount);\r\n    }\r\n  };\r\n\r\n  console.log(skippedQuestions)\r\n\r\n\r\n  return (\r\n    <div className=\"chatpage\">\r\n      <div className=\"chatback\">\r\n        <img src=\"/images/design7_1.png\" alt=\"Background\" />\r\n      </div>\r\n\r\n      <div className=\"wrapContainer\">\r\n        <div\r\n          className={`headPhoto ${showChat ? \"headPhoto-chat\" : \"\"} ${\r\n            headPhotoHidden ? \"hidden\" : \"\"\r\n          }`}\r\n        >\r\n          <img src=\"/images/profil.jpg\" alt=\"Profile\" />\r\n        </div>\r\n        <hr className=\"full-width-line\" />\r\n\r\n        <div\r\n          className={`infoContainer ${showChat ? \"infoContainer-hide\" : \"\"}`}\r\n        >\r\n          <span>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit...\r\n          </span>\r\n          <button onClick={handleNextClick}>Dalej</button>\r\n        </div>\r\n\r\n        {chatVisible && (\r\n          <>\r\n            <div className=\"scroll-buttons\">\r\n              {/* Przyciski do przewijania */}\r\n              <button onClick={() => handleScroll(\"up\")}>⬆</button>\r\n              <button onClick={() => handleScroll(\"down\")}>⬇</button>\r\n            </div>\r\n\r\n            <div\r\n              className=\"chatContainer chat-visible\"\r\n              style={{ transform: `translateY(-${scrollOffset}px)` }}\r\n            >\r\n              {conversation.map((message, index) => (\r\n                <div\r\n                  className={`chat-message ${\r\n                    message.type === \"bot\"\r\n                      ? \"chat-bot-message\"\r\n                      : \"chat-user-message\"\r\n                  }`}\r\n                  ref={\r\n                    index === conversation.length - 1 ? lastMessageRef : null\r\n                  }\r\n                >\r\n                  {message.type === \"bot\" ? (\r\n                    <>\r\n                      <div className=\"bot-avatar\">\r\n                        <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                      </div>\r\n                      <p className=\"lato-light\">{message.text}</p>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      {editMode && editIndex === message.id ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                              handleSaveEdit(message.id);\r\n                            }\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <p className=\"lato-light\">{message.text}</p>\r\n                      )}\r\n                      {message.type === \"user\" && (\r\n                        <div className=\"user-avatar\">\r\n                          <button onClick={() => handleEdit(message.id)}>\r\n                            <img src=\"/images/account.png\" alt=\"User Avatar\" />\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              {currentQuestionIndex === formData.length &&\r\n                skippedQuestions.length > 0 && (\r\n                  <div className=\"skipped-questions\">\r\n                    <h3>Lista pytań pominiętych:</h3>\r\n                    <ul>\r\n                      {skippedQuestions.map((question, index) => (\r\n                        <li key={index}>{question}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n\r\n              {botTyping && (\r\n                <div className=\"chat-bot-message\">\r\n                  <div className=\"bot-avatar\">\r\n                    <img src=\"/images/profil.jpg\" alt=\"Bot Avatar\" />\r\n                  </div>\r\n                  <div className=\"typing-text lato-light\">\r\n                    <Typewriter\r\n                      options={{\r\n                        strings: [formData[currentQuestionIndex].question],\r\n                        autoStart: true,\r\n                        delay: typeSpeed,\r\n                        cursor: \" \",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {userInputVisible && !editMode && (\r\n                <div className=\"user-input-container\" ref={userInputRef}>\r\n                  {formData[currentQuestionIndex].type === \"choice\" ? (\r\n                    <div className=\"choice-container\">\r\n                      {Array.isArray(formData[currentQuestionIndex].options) &&\r\n                        formData[currentQuestionIndex].options.map(\r\n                          (option, index) => (\r\n                            <button\r\n                              key={index}\r\n                              onClick={() => handleOptionClick(option)}\r\n                              className=\"lato-light\"\r\n                            >\r\n                              {option}\r\n                            </button>\r\n                          )\r\n                        )}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"chat-user-message\">\r\n                      {formData[currentQuestionIndex].inputs &&\r\n                      Array.isArray(formData[currentQuestionIndex].inputs) ? (\r\n                        formData[currentQuestionIndex].inputs.map(\r\n                          (input, i) => (\r\n                            <input\r\n                              key={i}\r\n                              type=\"text\"\r\n                              className={`user-input ${\r\n                                formData[currentQuestionIndex].inputs.length ===\r\n                                1\r\n                                  ? \"full-width\"\r\n                                  : \"half-width\"\r\n                              }`}\r\n                              placeholder={input.placeholder}\r\n                              value={userInputs[input.fieldName] || \"\"}\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, input.fieldName)\r\n                              }\r\n                              onKeyDown={handleInputSubmit}\r\n                            />\r\n                          )\r\n                        )\r\n                      ) : (\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"user-input full-width\"\r\n                          placeholder=\"Your response...\"\r\n                          value={userInputs.singleInput || \"\"}\r\n                          onChange={(e) =>\r\n                            setUserInputs({ singleInput: e.target.value })\r\n                          }\r\n                          onKeyDown={handleInputSubmit}\r\n                        />\r\n                      )}\r\n                      <div className=\"user-avatar\">\r\n                        <img src=\"/images/account.png\" alt=\"User Avatar\" />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}